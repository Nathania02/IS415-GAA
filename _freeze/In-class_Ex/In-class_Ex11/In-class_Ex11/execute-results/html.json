{
  "hash": "7a045955f5cc2c79bfd42fba38cb4e92",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Ex 11\"\nauthor: \"Nathania Yeo\"\ndate: \"November 4, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# Load Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n# Load Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\nfile_list <- list.files(path=folder_path, pattern=\"^realis.*\\\\.csv$\", full.names=TRUE)\n\nrealis_data <- file_list %>% map_dfr(read_csv)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10000 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 6643 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nMake sure postal code is 6 digit character\n\nSale Date is character not numerical (cannot do data manipulation, cannot search by month/weeks) -\\> change to a date field\n\n# Wrangling Data\n\nConvert values in Sale Date from character to numerical\n\nExtract only resale condo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>% mutate(`Sale Date` = dmy(`Sale Date`)) %>% \n  filter(`Type of Sale` == \"Resale\" & `Property Type` == \"Condominium\")\n```\n:::\n\n\n# Geocoding\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode <- unique(condo_resale$'Postal Code')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y',\n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n\n# Tidying field names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>% select(c(6:8)) %>% rename(POSTAL='results.POSTAL', \n                                             XCOORD = 'results.X', \n                                             YCOORD = 'results.Y')\n```\n:::\n\n\n# Join tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_geocoded = left_join(condo_resale, found, by =c(\"Postal Code\"= \"POSTAL\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded, coords=c(\"XCOORD\", \"YCOORD\"), crs=3414)\n```\n:::\n\n\n# Cleaning the spatial data\n\nChecking for overlapping point features\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>% mutate(overalp = lengths(st_equals(., .))>1)\n```\n:::\n\n\nSpatial jittering\n\n-   Don't use values such as 0.5 or 0.1 for amount parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>% st_jitter(amount=2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}