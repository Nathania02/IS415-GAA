[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Assignment 2",
    "section": "",
    "text": "Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\nThe geopolitics of Thailand which is near the Golden Triangle of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\n\nFor this take home exercise, 5 packages will be used. They are: 1. sf: provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis. 2. sfdep: for computing spatial weights, global and local spatial autocorrelation statistics 3. tmap: for creating static and interactive visualisations and maps 4. tidyverse: a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure. 4. dplyr: to make data manipulation easier\n\npacman::p_load(sf, sfdep, tmap, tidyverse, dplyr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-packages",
    "title": "Take Home Assignment 2",
    "section": "",
    "text": "For this take home exercise, 5 packages will be used. They are: 1. sf: provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis. 2. sfdep: for computing spatial weights, global and local spatial autocorrelation statistics 3. tmap: for creating static and interactive visualisations and maps 4. tidyverse: a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure. 4. dplyr: to make data manipulation easier\n\npacman::p_load(sf, sfdep, tmap, tidyverse, dplyr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-geospatial-data",
    "title": "Take Home Assignment 2",
    "section": "2.1 Importing Geospatial Data",
    "text": "2.1 Importing Geospatial Data\nI will use st_read() to import the dataset into the R environment. I then checked the coordinate reference system to check if the CRS value is correct. Since it has not been set, I convert the coordinate reference system to 32647 which is Thailand CRS value.\n\nboundary_data &lt;- st_read(dsn = \"data\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Nathania02\\IS415-GAA\\Take-home_Ex\\Take-home_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(boundary_data)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\nboundary_data &lt;- st_transform(boundary_data, crs = 32647)\n\n\nst_crs(boundary_data)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nI then plot the thailand province object to take a look at how the map looks like.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(boundary_data)+\n  tm_fill(col=\"white\")+\n  tm_borders(col = \"black\", lwd=0.3, alpha=0.6)+\n  tm_layout(\n    main.title = \"Province (Thailand)\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n     frame = FALSE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-aspatial-dataset",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-aspatial-dataset",
    "title": "Take Home Assignment 2",
    "section": "2.2 Importing Aspatial Dataset",
    "text": "2.2 Importing Aspatial Dataset\nI used read_csv() to read the aspatial dataset into R environment.\n\ndrug_offenses &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(drug_offenses)\n\n  fiscal_year   types_of_drug_offenses    no_cases       province_th       \n Min.   :2017   Length:7392            Min.   :    0.0   Length:7392       \n 1st Qu.:2018   Class :character       1st Qu.:    1.0   Class :character  \n Median :2020   Mode  :character       Median :   70.0   Mode  :character  \n Mean   :2020                          Mean   :  535.3                     \n 3rd Qu.:2021                          3rd Qu.:  623.0                     \n Max.   :2022                          Max.   :17131.0                     \n province_en       \n Length:7392       \n Class :character  \n Mode  :character"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#join-table-together",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#join-table-together",
    "title": "Take Home Assignment 2",
    "section": "3.1 Join table together",
    "text": "3.1 Join table together\nI joined the boundary data and the drug offenses data together using left_join(). Since the column “ADM1_TH” in boundary data matches the “provine_th” column in the drug offenses data, i made use of both of these column to join the tables. Since I will be analysing drug offences in the province level, I select the following columns that will be helpful to my analysis to create my new data: fiscal_year, types_of_drug_offenses, no_cases, geometry.\n\ndrug_offences_all &lt;- left_join(boundary_data, drug_offenses, by = c(\"ADM1_TH\" = \"province_th\")) %&gt;% select(3, 17:19, 21)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removal-of-data-rows",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removal-of-data-rows",
    "title": "Take Home Assignment 2",
    "section": "3.2 Removal of data rows",
    "text": "3.2 Removal of data rows\nAs the dataset is too big and I do not have enough computational power to analyse the entire dataset, I filtered out rows with the word “suspects” in the types of drug offenses column. I want to narrow my analysis and focus it on actual drug offenses that have already taken place. I then removed the column types_of_drug_offenses and processed the remaining data. I also found out that Phuket does not have any neighbouring province. I decided to remove it since it will not help in our analysis.\n\ndf_filtered &lt;- drug_offences_all %&gt;%\n  filter(!grepl(\"suspects\", types_of_drug_offenses, ignore.case = TRUE))\n\n\ndf_filtered &lt;- df_filtered %&gt;%\n  filter(!grepl(\"Phuket\", ADM1_EN, ignore.case=TRUE))\n\n\ndf_filtered &lt;- subset(df_filtered, select = -c(types_of_drug_offenses) )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summing-up-number-of-drug-offenses-cases",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summing-up-number-of-drug-offenses-cases",
    "title": "Take Home Assignment 2",
    "section": "3.3 Summing up number of drug offenses cases",
    "text": "3.3 Summing up number of drug offenses cases\nFor this study, we are interested in finding out about the drug abuse in each province across the years from 2017 to 2022. Since the dataset is still too huge after performing the data preprocessing as mentioned above, I decided to sum the number of drug abuse up based on the province and the year. I then save this data into a rds file so that I would not have to waste computational power to run the data preprocessing steps again.\n\ndrug_offences_final &lt;- df_filtered %&gt;%\n  group_by(ADM1_EN, fiscal_year) %&gt;%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE),\n            geometry = first(geometry), .groups = 'drop')\n\n\nwrite_rds(drug_offences_final, \"rds/drug_offences.rds\")\nfor (year in names(yearly_data)) {\n  file_name &lt;- paste0(\"rds/drug_offense_year_\", year, \".rds\")  # Create the file name\n  saveRDS(yearly_data[[year]], file = file_name)      # Save the data frame as an RDS file\n}\n\n\ndrug_offences_final &lt;- read_rds(\"rds/drug_offences.rds\")\n\nBesides saving the whole data, I also broke them down by year and save each year data into a rds file.\n\nyears &lt;- unique(drug_offences_final$fiscal_year)\n\n# Create a list to store the data frames for each year\nyearly_data &lt;- list()\n\n# Loop through each year and create a separate object for each\nfor (year in years) {\n  yearly_data[[as.character(year)]] &lt;- drug_offences_final %&gt;%\n    filter(fiscal_year == year)\n}\n\n\nyear_2017 &lt;- read_rds(\"rds/drug_offense_year_2017.rds\")\nyear_2018 &lt;- read_rds(\"rds/drug_offense_year_2018.rds\")\nyear_2019 &lt;- read_rds(\"rds/drug_offense_year_2019.rds\")\nyear_2020 &lt;- read_rds(\"rds/drug_offense_year_2020.rds\")\nyear_2021 &lt;- read_rds(\"rds/drug_offense_year_2021.rds\")\nyear_2022 &lt;- read_rds(\"rds/drug_offense_year_2022.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-contiguity-spatial-weights",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-contiguity-spatial-weights",
    "title": "Take Home Assignment 2",
    "section": "4.1 Computing Contiguity Spatial Weights",
    "text": "4.1 Computing Contiguity Spatial Weights\nBefore computing the global spatial autocorrelation statistics, I will construct the spatial weights of the study area. This is used to define the neighbourhood relationships between the province in Thailand. I will make use of st_contiguity() to compute contiguity weight matrices for the study area. This function builds a neighbours list based on province with contiguous boundaries. For this study, I will use queen criteria to calculate the neighbour list. I loop through each year data and constructed the spatial weights for each year which I then added them into a list called nb_list.\n\nnb_list &lt;- list()\n\n# Loop through each year in the yearly_data list\nfor (year in names(yearly_data)) {\n  # Get the data for the current year\n  data_for_year &lt;- yearly_data[[year]]\n  nb_list[[year]] &lt;- st_contiguity(data_for_year, queen = TRUE)\n  print(summary(nb_list[[year]]))\n}\n\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 1  5 17 15 17 10  5  4  2 \n1 least connected region:\n70 with 1 link\n2 most connected regions:\n17 68 with 9 links"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#row-standardized-weights-matrix",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#row-standardized-weights-matrix",
    "title": "Take Home Assignment 2",
    "section": "4.2 Row standardized weights matrix",
    "text": "4.2 Row standardized weights matrix\nNext, I assign the spatial weights to each neighbouring polygon. I will use the st_weights() function to supplement a neighbour list with spatial weights based on the selected coding scheme. I made use of W which represents row standardised weight matrix. This makes sure that the total value for each row sums up to 1. Row standardisation weight matrix makes sure that the weights are between 0 and 1. This helps in the interpretation of operation with weight matrix as an averaging of neighbouring values which allow for the spatial parameter to be comparable between models. Similarly to above, since there are multiple years, I loop through each year data and assign the spatial weights to each neighbouring polygon for each year.\n\nrswm_q_list &lt;- list()\nwm_rs_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  wm_rs &lt;- st_weights(nb_list[[year]], style = \"W\")\n  \n  rswm_q_list[[year]] &lt;- data_for_year %&gt;% mutate(nb=nb_list[[year]], wt=wm_rs, .before=1) \n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-morans-i-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-morans-i-test",
    "title": "Take Home Assignment 2",
    "section": "5.1 Global Moran’s I test",
    "text": "5.1 Global Moran’s I test\nThe primary goal of this test is to see if the spatial autocorrelation is positive, negative or non-existent. The hypothesis of this test are: - H0: There is no spatial autocorrelation or negative spatial autocorrelation - H1: There is the presence of positive spatial autocorrelation\nIn this test, I broke it down into each year to see if there are spatial autocorrelation for each year data.\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  result &lt;- global_moran_test(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt, alternative=\"greater\")\n  print(year)\n  print(result)\n}\n\n[1] \"2017\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.5561, p-value = 0.005293\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.137714982      -0.013333333       0.003492098 \n\n[1] \"2018\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.2233, p-value = 0.0131\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.120866215      -0.013333333       0.003643392 \n\n[1] \"2019\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.5576, p-value = 0.00527\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.16068782       -0.01333333        0.00462963 \n\n[1] \"2020\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.9667, p-value = 0.02461\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.127430656      -0.013333333       0.005123019 \n\n[1] \"2021\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.8053, p-value = 0.002513\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.198171831      -0.013333333       0.005684265 \n\n[1] \"2022\"\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.8098, p-value = 0.002479\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.202009605      -0.013333333       0.005873823 \n\n\nAs seen from the results, across all the years, the Moran’s I statistics is significantly higher and different from the expectation under the null hypothesis. This means that there is significant spatial autocorrelation in the data across the years. All the p-value for all years are below 0.05 which indicates that the spatial pattern is unlikely to be a result of random chance. In this case, we will reject the null hypothesis of no spatial autocorrelation.\nIn conclusion, the test results suggests that there is positive spatial autocorrelation in our study area. This means that provinces with similar number of drug abuse are more likely to be located near each other."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-morans-i-permutation-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-morans-i-permutation-test",
    "title": "Take Home Assignment 2",
    "section": "5.2 Global Moran’s I Permutation test",
    "text": "5.2 Global Moran’s I Permutation test\nI then ran global_moran_perm() with nsim=999 which represent 1000 Monte Carlo simulations to be carried out.\n\ngmoran_MC_list &lt;- list()\nset.seed(1234)\nfor (year in names(yearly_data)) {\n  # Get the data for the current year\n  data_for_year &lt;- yearly_data[[year]]\n  gmoran_MC_list[[year]] &lt;- global_moran_perm(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt, nsim=999)\n  print(year)\n  print(gmoran_MC_list[[year]])\n}\n\n[1] \"2017\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.13771, observed rank = 979, p-value = 0.042\nalternative hypothesis: two.sided\n\n[1] \"2018\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.12087, observed rank = 967, p-value = 0.066\nalternative hypothesis: two.sided\n\n[1] \"2019\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.16069, observed rank = 986, p-value = 0.028\nalternative hypothesis: two.sided\n\n[1] \"2020\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.12743, observed rank = 964, p-value = 0.072\nalternative hypothesis: two.sided\n\n[1] \"2021\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.19817, observed rank = 994, p-value = 0.012\nalternative hypothesis: two.sided\n\n[1] \"2022\"\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20201, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\nFrom the output above, we can see that across all years, the results are almost identical to our results above using global_moran_test(). This means that our results is stable and is statistically significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-monte-carlo-morans-i",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-monte-carlo-morans-i",
    "title": "Take Home Assignment 2",
    "section": "5.3 Visualising Monte Carlo Moran’s I",
    "text": "5.3 Visualising Monte Carlo Moran’s I\nI then plot 6 histograms, 1 for each year to look at the permutation results and compare them to the expected value under the null hypothesis.\n\nfor (year in names(yearly_data)) {\n  # Get the data for the current year\n  data_for_year &lt;- yearly_data[[year]]\n  xlab_title &lt;- paste(\"Simulated Moran's I\", year)\n  hist(gmoran_MC_list[[year]]$res, main=\"Histogram of Monte Carlo Moran's I Simulation Results\", xlab=xlab_title, ylab = \"Frequency\")\n  abline(v=gmoran_MC_list[[year]]$statistic, col=\"red\")\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gearys-c-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gearys-c-test",
    "title": "Take Home Assignment 2",
    "section": "6.1 Geary’s C test",
    "text": "6.1 Geary’s C test\nI decided to use Geary’s C test. Through Geary’s c statistics, it tells us the degree of intensity of a given feature in spatial objects described with the use of a weight matrix. From the results, we can tell the spatial autocorrelation in the data. Similar to above, I ran the results for each year.\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  result &lt;- global_c_test(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt, alternative=\"greater\")\n  print(year)\n  print(result)\n}\n\n[1] \"2017\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 0.015121, p-value = 0.494\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.99787741        1.00000000        0.01970579 \n\n[1] \"2018\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = -0.0093488, p-value = 0.5037\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        1.0012850         1.0000000         0.0188926 \n\n[1] \"2019\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 0.62426, p-value = 0.2662\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.92722197        1.00000000        0.01359168 \n\n[1] \"2020\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 0.40929, p-value = 0.3412\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.95719077        1.00000000        0.01093976 \n\n[1] \"2021\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 1.4737, p-value = 0.07028\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.868819188       1.000000000       0.007923123 \n\n[1] \"2022\"\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 1.7472, p-value = 0.0403\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.854819088       1.000000000       0.006904269 \n\n\nAs seen from the results above, year 2017, 2019-2022 all have a Geary C statistics that is below the null hypothesis of 1. This suggests the presence of spatial autocorrelation in the data. In year 2018, we realised that the Geary C statistics is above the null hypothesis of 1. This means that there is either no spatial autocorrelation or there is negative spatial autocorrelation.\nHowever, when we look closer to the p-value, we realised that across the years 2017-2021, all the p-value are more than 0.05. This indicates that the spatial pattern observed is likely to be the result of random chance. Therefore we accept the null hypothesis of no or negative spatial correlation for the years 2017-2021.\nFor 2022, the p-value is less than 0.05 which indicates that there is spatial pattern. Therefore, we reject the null hypothesis of no spatial correlation.\nIn conclusion, the test results for 2017-2021 suggest that there is no or negative spatial autocorrelation in the study area. This means that the drug abuse could be randomly distributed or that the neighbouring province have dissimilar values of total cases of drug abuse. One possible reason that Geary’s C results differ from Moran’s I is that there could be outliers and local variations which Geary’s C is more sensitive towards and hence, showing us a different result and conclusion from Moran’s I."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gearys-c-permutation-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gearys-c-permutation-test",
    "title": "Take Home Assignment 2",
    "section": "6.2 Computing Geary’s C Permutation Test",
    "text": "6.2 Computing Geary’s C Permutation Test\n\nglobalGC_list &lt;- list()\nset.seed(1234)\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  globalGC_list[[year]]=global_c_perm(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt, nsim=999)\n  print(year)\n  print(globalGC_list[[year]])\n}\n\n[1] \"2017\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.99788, observed rank = 527, p-value = 0.527\nalternative hypothesis: greater\n\n[1] \"2018\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.0013, observed rank = 530, p-value = 0.53\nalternative hypothesis: greater\n\n[1] \"2019\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.92722, observed rank = 271, p-value = 0.271\nalternative hypothesis: greater\n\n[1] \"2020\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.95719, observed rank = 349, p-value = 0.349\nalternative hypothesis: greater\n\n[1] \"2021\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.86882, observed rank = 60, p-value = 0.06\nalternative hypothesis: greater\n\n[1] \"2022\"\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.85482, observed rank = 49, p-value = 0.049\nalternative hypothesis: greater\n\n\nFrom the results above, we can observe that the statistics value is quite similar to those of Geary’s C test. Therefore, we can confirm that the result is stable and statistically significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-monte-carlo-gearys-c",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-monte-carlo-gearys-c",
    "title": "Take Home Assignment 2",
    "section": "6.3 Visualising the Monte Carlo Geary’s C",
    "text": "6.3 Visualising the Monte Carlo Geary’s C\nI plot 6 histograms, one for each year to look at the permutation results and compare them to the expected value under null hypothesis.\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  xlab_title &lt;- paste(\"Simulated Geary C\", year)\n  hist(globalGC_list[[year]]$res, main=\"Histogram of Global Geary's C Monte-Carlo Simulation Results\", xlab = xlab_title, ylab=\"Frequency\")\n  abline(v=globalGC_list[[year]]$statistic, col=\"red\")\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-morans-i-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-morans-i-values",
    "title": "Take Home Assignment 2",
    "section": "7.1 Mapping local Moran’s I values",
    "text": "7.1 Mapping local Moran’s I values\nIn this section, I made used of tmap functions to visualise the Local Moran’s I values across the study area. I will examine the Local Moran’s I value with and without p-values. The p-value will provide more information of the statistical significance associated with each local Moran’s I value.\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  map &lt;- tm_shape(data_for_year) + \n      tm_fill(col = \"ii\",\n              style = \"pretty\",\n              palette = \"RdBu\",\n              title=paste(\"Local Moran Statistics \", year)) +\n      tm_borders(alpha=0.5)\n  \n  map_pvalues &lt;- tm_shape(data_for_year) + \n    tm_fill(col = \"p_ii_sim\",\n            style = \"pretty\",\n            palette = \"RdBu\",\n            title=paste(\"Local Moran Statistics p-values \", year)) +\n    tm_borders(alpha=0.5)\n  \n  maps &lt;- tmap_arrange(map, map_pvalues, asp=1, ncol=2)\n  print(maps)\n}\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nFocusing on the maps without p-values From the graphs, the colours can tell us which province may be outliers and which provinces tend to be spatial clusters. Those areas that are coloured blue tend to range 0.0 to 5. This suggests that these provinces tend to be spatial clusters which are similar values compared to neighbouring province. On the other hand, those province that are coloured Dark Orange and Light Orange usually ranges from -2 to 0. This suggests that these province tend to be an outlier which have dissimilar values compared to neighbouring province.\nAcross the years, we can observed that province that are coloured orange became blue. The number of province coloured blue significantly increased in the year 2021, indicating that there is an increase in provinces that are spatial clusters with similar values of drug abuse when compared to their neighbouring province.\nOne thing that stood out was the province coloured dark orange among the blue provinces in the year 2022. With the only province coloured in dark orange, it indicates that this province is definitely an outlier.\nOverall, we can see that the concentration of drug abuse cases are in the South, North West provinces as well as the central provinces.\nFocusing on the maps with p-values Across the years, there are many provinces that have a statistically significant spatial autocorrelation. An example is that in the year 2022, there are province coloured dark blue in the map on the left with indicates spatial clusters where the neigbouring provinces have similar values. In the map on the right, the same provinces are coloured daek red which indicates statistially significant spatial autocorrelation. The results match and this shows that in these provinces, the spatial clustering is not random. These provinces either have low or high drug abuse cases."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plotting-lisa-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plotting-lisa-map",
    "title": "Take Home Assignment 2",
    "section": "8.1 Plotting LISA map",
    "text": "8.1 Plotting LISA map\nAs seen from all the maps in Section 7.2, across the years, not all province exhibit statistically significant Local Moran’s I value. I will filter them out since I want to focus on province that with statistically significant Local Moran’s I value. I also created the LISA quadrants in order to plot the map.\n\nquadrant_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  \n  quadrant_list[[year]] &lt;- vector(length = nrow(data_for_year))\n  yearly_data[[year]]$lag_total_cases &lt;- st_lag(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt)\n  DV &lt;- yearly_data[[year]]$lag_total_cases - mean(yearly_data[[year]]$lag_total_cases)\n  LM_I &lt;- local_moran_list[[year]][,1] \n  signif &lt;- 0.05\n  quadrant_list[[year]][DV&lt;0 & LM_I&gt;0] &lt;- \"LOW - LOW\"\n  quadrant_list[[year]][DV&gt;0 & LM_I&lt;0] &lt;- \"LOW - HIGH\"\n  quadrant_list[[year]][DV&lt;0 & LM_I&lt;0] &lt;- \"HIGH - LOW\"\n  quadrant_list[[year]][DV&gt;0 & LM_I&gt;0] &lt;- \"HIGH - HIGH\"\n  quadrant_list[[year]][local_moran_list[[year]][,5]&gt;signif] &lt;- \"Insignificant\"\n  \n  yearly_data[[year]]$quadrant &lt;- quadrant_list[[year]]\n}\n\n\nlisa_significant &lt;- list()\nfor (year in names(yearly_data)){\n  year_data &lt;- lisa_list[[year]]\n  significant_data &lt;- yearly_data[[year]] %&gt;% filter(p_ii&lt;0.05)\n  lisa_significant[[year]] &lt;- significant_data\n}\n\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n\n  map1 &lt;- tm_shape(data_for_year) + \n    tm_polygons() +\n    tm_borders(alpha=0.5)+\n    tm_shape(lisa_significant[[year]]) + \n    tm_fill(\"quadrant\")+\n    tm_borders(alpha=0.5)\n  \n  map2 &lt;- tm_shape(data_for_year) + tm_polygons(\"total_cases\", palette=\"Blues\", style=\"quantile\", n=10)\n\n  maps&lt;-tmap_arrange(map1, map2, asp=1, ncol=2)\n  print(maps)\n}\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nFrom the graphs above, we can identify the province that has statistically significant spatial autocorrelation with its neighbouring provinces.\nIn 2017, although there are quite a number of province with high drug abuse cases (DARK BLUE) as seen from the right graph, the province with HIGH HIGH drug abuse clusters are only in the central bottom region.\n2018 and 2019 has not much difference but we can see that the number of province with high drug abuse cases are increasing. In 2020, the south provinces in Thailand has an increase in drug abuse cases where the province are coloured dark blue.2 of the province with high drug abuse cases are also part of the HIGH HIGH drug abuse clusters.\nIn 2022, provinces in the north east of Thailand has extremely high number of drug abuse cases where they belong to the HIGH HIGH cluster. Many of them are coloured in dark blue. However, one region stood out where it is coloured light blue among the province coloured dark blue. This also explains the colouring in the LISA cluster map. The region that is coloured light blue belongs to a LOW HIGH cluster which means that the drug abuse cases in that province is low but is surrounded by neighbouring province with high drug abuse cases.\nAnother observation that we can make is the LOW LOW clusters. There aren’t any from 2017-2020 and it only appeared in 2019. This could possibly mean that the police in these province may be working together to take actions on drug abuse criminals which led to a decrease in cases and hence, these provinces belong to a LOW LOW cluster."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getis-and-ords-g-statistics",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getis-and-ords-g-statistics",
    "title": "Take Home Assignment 2",
    "section": "9.1 Getis and Ord’s G statistics",
    "text": "9.1 Getis and Ord’s G statistics\nIn this section, we will analyse and hot and cold spots. I first derived the centroid of each polygon. I use map_dbl() function and st_centroid() function to get the longitude and latitude values. After getting the objects, I use cbind to put them into the same object. Each year will have one object each.\n\nlongitude_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  longitude_list[[year]] &lt;- map_dbl(data_for_year$geometry, ~st_centroid(.x)[[1]])\n}\n\n\nlatitude_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  latitude_list[[year]] &lt;- map_dbl(data_for_year$geometry, ~st_centroid(.x)[[2]])\n}\n\n\ncoords_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  coords_list[[year]] &lt;- cbind(longitude_list[[year]], latitude_list[[year]])\n}\n\nI then determine the upper limit for distance band.\n\nk1dists_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  k1dists_list[[year]] &lt;- st_nb_dists(coords_list[[year]], rswm_q_list[[year]]$nb)\n  print(summary(unlist(k1dists_list[[year]])))\n}\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   68240   88575   95034  115632  245486 \n\n\nAs shown from the summary report above, the largest first nearest neighbour distance is 245486km. So I will be using this as the upper threshold which gives the certainty that all units all have at least one neighbour.\nSince I will be testing with fixed and adaptive distance weight matrix, I first get the distance neighbour and weights.\n\nwm_fd_nb_list &lt;- list()\nwm_fd_wt_list &lt;- list()\nwm_ad_nb_list &lt;- list()\nwm_ad_wt_list &lt;- list()\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  wm_fd.nb &lt;- st_dist_band(coords_list[[year]], lower=0, upper=245486)\n  wm_fd_nb_list[[year]] &lt;- wm_fd.nb\n  wm_fd_wt_list[[year]] &lt;- st_inverse_distance(wm_fd.nb, data_for_year$geometry)\n  \n  wm_ad.nb &lt;- st_knn(coords_list[[year]], k=8)\n  wm_ad_nb_list[[year]] &lt;- wm_ad.nb\n  wm_ad_wt_list[[year]] &lt;- st_inverse_distance(wm_ad.nb, data_for_year$geometry)\n  \n}\n\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n\n\nI plot the graphs side by side for each year in order to make comparison much easier.\n\nfor (year in names(yearly_data)) {\n  data_for_year &lt;- yearly_data[[year]]\n  wm_fd.nb &lt;- wm_fd_nb_list[[year]]\n  wm_fd.wt &lt;- wm_fd_wt_list[[year]]\n  wm_ad.nb &lt;- wm_ad_nb_list[[year]]\n  wm_ad.wt &lt;- wm_ad_wt_list[[year]]\n\n  hcsa &lt;- data_for_year %&gt;% cbind(local_gstar_perm(rswm_q_list[[year]]$total_cases, rswm_q_list[[year]]$nb, rswm_q_list[[year]]$wt, nsim=99)) %&gt;% mutate(\"p_sim\" = replace(`p_sim`, `p_sim` &gt; 0.05, NA),\n         \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n\n  hcsa.fd &lt;- data_for_year %&gt;% \n    cbind(local_gstar_perm(rswm_q_list[[year]]$total_cases, wm_fd.nb, wm_fd.wt, nsim=99)) %&gt;%mutate(\"p_sim\" = replace(`p_sim`, `p_sim` &gt; 0.05, NA),\n           \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n  \n  hcsa.ad &lt;- data_for_year %&gt;% cbind(local_gstar_perm(rswm_q_list[[year]]$total_cases, wm_ad.nb, wm_ad.wt, nsim=99)) %&gt;% mutate(\"p_sim\" = replace(`p_sim`, `p_sim` &gt; 0.05, NA),\n           \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n  \n  map1 &lt;- tm_shape(hcsa.fd) + tm_fill(\"gi_star\", title = paste(\"Gi* fixed \", year)) + tm_borders(alpha=0.5)\n  map2 &lt;- tm_shape(hcsa.ad) + tm_fill(\"gi_star\", title = paste(\"Gi* adaptive\", year)) + tm_borders(alpha=0.5)\n  \n  maps &lt;- tmap_arrange(map1, map2, asp = 1, ncol = 2)\n  print(maps)\n}\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nMost of the maps are quite similar in terms of highlighted areas but there are still a few province that were picked out under adaptive distances but not fixed distances. An example is for the year 2017, for the adaptive distances, it has identified the bottom central region to be a cold spot while the fixed distances did not identify it. Another example is in 2018, the central bottom provinces are still identified as a cold spot for adaptive distances but it was not coloured out in fixed distances. On the other hand, for the year 2022, a cold spot was identified in the fixed distances map in the east of Thailand while it was not identified as one in the adaptive distances."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Ex 05",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhunan &lt;- left_join(hunan, hunan2012, by='County') %&gt;% dplyr::select(1:4, 7, 15)\n\n\nwrite_rds(hunan, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- hunan_sf %&gt;% as_Spatial()\n\nDetermine adaptive bandwidth longlat: To know that your coord pairs are in lat long, this package would transform to greate circle transformation, its in KM. Both methods below are the same but depends on geographical area Calculate number of neighbours AIC:\n\nbw_AIC &lt;- bw.gwr(GDPPC~1, data=hunan_sp, approach=\"AIC\", adaptive=TRUE, kernel=\"bisquare\", longlat=1)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\nCross validation:\n\nbw_AIC &lt;- bw.gwr(GDPPC~1, data=hunan_sp, approach=\"AIC\", adaptive=TRUE, kernel=\"bisquare\", longlat=1)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\nDetermine fixed bandwidth\n\nbw_CV &lt;- bw.gwr(GDPPC~1, data=hunan_sp, approach=\"CV\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\nbw_CV &lt;- bw.gwr(GDPPC~1, data=hunan_sp, approach=\"AIC\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\nCompute grographically weighted summary statistics Make sure that the adaptive variable is TRUE\n\ngwstat &lt;- gwss(data=hunan_sp, vars=\"GDPPC\", bw = bw_AIC, kernel=\"bisquare\", adaptive=TRUE, longlat=T)\n\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame(). Assumes that the data format are the same. cbind() is used to append the newly derived data\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\nVisualising geographically weighted summary statistics\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\", n=5, style = \"quantile\") + tm_borders(alpha=0.5) + tm_layout(main.title=\"Distribution of geographically weighted mean\", main.title.position = \"center\", main.title.size = 1.0, legend.text.size = 1.2, legend.height = 1.50, legend.width = 1.50, frame=TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "In-class_Ex/In-class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Ex2",
    "section": "",
    "text": "1.0 Importing Data\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nmpsz &lt;- st_read(dsn = \"data\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Nathania02\\IS415-GAA\\In-class_Ex\\In-class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nclass(mpsz)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nst_write(mpsz, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Nathania02\\IS415-GAA\\In-class_Ex\\In-class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19 &lt;- st_read(dsn = \"data\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Nathania02\\IS415-GAA\\In-class_Ex\\In-class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npopdata &lt;- read_csv(\"data/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.0 Data Wrangling\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;% mutate_at(.vars = vars(PA, SZ), \n                                         .funs = list(toupper))\n\n\npopdata2023 &lt;- left_join(popdata2023, mpsz19, by=c(\"SZ\" = \"SUBZONE_N\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, I will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis;\nand spatially constrained cluster analysis.\n\n\n\nBy the end of this hands-on exercise, I will be able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R;\nand to visualise the analysis output by using ggplot2 and tmap package.\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "By the end of this hands-on exercise, I will be able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R;\nand to visualise the analysis output by using ggplot2 and tmap package.\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#r-packages",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "2.2 R packages",
    "text": "2.2 R packages\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling: sf, rgdal and spdep\nAttribute data handling: tidyverse, especially readr, ggplot2 and dplyr\nChoropleth mapping: tmap\nMultivariate data visualisation and analysis: coorplot, ggpubr, and heatmaply\nCluster analysis: cluster ClustGeo\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-statistical-graphics",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "4.1 EDA using statistical graphics",
    "text": "4.1 EDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, I will plot the distribution of the newly derived variable (i.e Radio penetration rate)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe histogram for Radio is more of a left skewed plot and there are outliers with values of about 13000, 15500 and 30500. For RADIO_PR histogram, it has a normal distribution and does not have that many outliers as compared to RADIO.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-choropleth-map",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "4.2 EDA using Choropleth map",
    "text": "4.2 EDA using Choropleth map\n\n4.2.1 Joining geospatial data with aspatial data\nThis will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n4.2.2 Preparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nThe townships with relatively larger number of households show lower radio penetration rate."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#extracting-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#extracting-clustering-variables",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.1 Extracting clustering variables",
    "text": "6.1 Extracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below.\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\n\n\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-standardisation",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.2 Data Standardisation",
    "text": "6.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#min-max-standardization",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#min-max-standardization",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.3 Min-Max standardization",
    "text": "6.3 Min-Max standardization\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#z-score-standardization",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#z-score-standardization",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.4 Z-score standardization",
    "text": "6.4 Z-score standardization\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-standardized-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-standardized-clustering-variables",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.5 Visualising the standardized clustering variables",
    "text": "6.5 Visualising the standardized clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\nAll the histograms have a normal distribution.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-proximity-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-proximity-matrix",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.6 Computing proximity matrix",
    "text": "6.6 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-hierarchical-clustering",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.7 Computing Hierarchical Clustering",
    "text": "6.7 Computing Hierarchical Clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#selecting-the-optimal-clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#selecting-the-optimal-clustering-algorithm",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.8 Selecting the optimal clustering algorithm",
    "text": "6.8 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#determining-optimal-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#determining-optimal-clusters",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.9 Determining Optimal Clusters",
    "text": "6.9 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\nElbow Method Average Silhouette Method Gap Statistic Method\n\n6.9.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#interpreting-the-dendrograms",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#interpreting-the-dendrograms",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.10 Interpreting the dendrograms",
    "text": "6.10 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visually-driven-hierarchical-clustering-analysis",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.11 Visually-driven hierarchical clustering analysis",
    "text": "6.11 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n6.11.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n6.11.2 Plotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#mapping-the-clusters-formed",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#mapping-the-clusters-formed",
    "title": "Hands-on Ex 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "6.12 Mapping the clusters formed",
    "text": "6.12 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "",
    "text": "In this exercise, I will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package\nimport csv file using appropriate function of readr package\nperform relational join using appropriate join function of dplyr package\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-acquisition",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nTwo data sets will be used in this hands-on exercise, they are:\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format. Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#r-packages",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "2.2 R packages",
    "text": "2.2 R packages\n\npacman::p_load(sf, tidyverse, spdep, tmap, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-shapefile",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "3.1 Import shapefile",
    "text": "3.1 Import shapefile\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Nathania02\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#import-csv-file",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "3.2 Import CSV file",
    "text": "3.2 Import CSV file\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#performing-relational-join",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "3.3. Performing Relational Join",
    "text": "3.3. Performing Relational Join\n\nhunan &lt;- left_join(hunan, hunan2012, by='County') %&gt;% dplyr::select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-queen-contiguity-based-neighbours",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "5.1 Computing (QUEEN) contiguity based neighbours",
    "text": "5.1 Computing (QUEEN) contiguity based neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo retrieve the GDPPC of these five countries, use the code chunk below:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-rook-contiguity-based-neighbours",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "5.2 Creating (ROOK) contiguity based neighbours",
    "text": "5.2 Creating (ROOK) contiguity based neighbours\n\nwm_r &lt;- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-contiguity-weights",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "5.3 Visualising contiguity weights",
    "text": "5.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. Since I am working with polygons now, I need to get points in order to make the connectivity graphs. The most typically method for this will be polygon centroids. I will calculate these in the sf package before moving onto the graphs.\nI will need points to associate with each polygon before I can make the connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. I will need the coordinates in a separate data frame for this to work. To do this I will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. The input vector will be the geometry column of us.bound. The function will be st_centroid. I will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get the longitude values I map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows me to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDo the same for latitude but the double bracket notation reference should be [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nUse cbind() to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nCheck if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n5.3.1 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\n5.3.2 Plot Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n5.3.3 Plot both Queen and Rook contiguity based neighbours map\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#determine-the-cut-off-distance",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#determine-the-cut-off-distance",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "6.1 Determine the cut-off distance",
    "text": "6.1 Determine the cut-off distance\nFirstly, determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "6.2 Computing fixed distance weight matrix",
    "text": "6.2 Computing fixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nEach region has about 3.68 neighboring regions with specified distance of 62 units.\nNext, use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "6.3 Computing adaptive distance weight matrix",
    "text": "6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "9.1 Spatial lag with row-standardized weights",
    "text": "9.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "9.2 Spatial lag as a sum of neighboring values",
    "text": "9.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x+1)\nb_weights2 &lt;- nb2listw(wm_q,\n                      glist=b_weights,\n                      style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nExamine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-average",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "9.3 Spatial window average",
    "text": "9.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan&lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-window-sum",
    "title": "Hands-on Ex 5: Spatial Weights and Applications",
    "section": "9.4 Spatial window sum",
    "text": "9.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. It can refer to the actual spatial or temporal location of these points or also include data from point sources.\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer in this hands-on exercise are as follows:\n\nAre the childcare centres in Singapore randomly distributed throughout the country?\nIf the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-acquisition",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nIn this exercise, we will use the following datasets:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#r-setup",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#r-setup",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.2 R Setup",
    "text": "2.2 R Setup\nIn this hands-on exercise, we will use the following R package:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nBelow is the code chunk that will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, devtools, sp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-wrangling",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Data Wrangling",
    "text": "4.1 Data Wrangling\nBelow code chunk retrieves the referencing system information of the geospatial data.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nSeen from above, mpsz_sf and sg_sf do not have proper crs information. The code chunk below does the necessary changes which assigns and correct mpsz_sf and childcare_sf crs to simple feature data frames.\n\nmpsz_sf &lt;- st_transform(mpsz_sf,crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-the-geospatial-datasets",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-the-geospatial-datasets",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Mapping the geospatial datasets",
    "text": "4.2 Mapping the geospatial datasets\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns. The code chunk below makes use of tmap to create a map as shown below.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf)+ tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n(tmap_mode code edited on 9 September)\n\n# tmap_mode('view')\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(childcare_sf)+ tm_dots()\n\n\n\n\n\n\n\n\n\n# tmap_mode(\"plot\")\n\nNotice that at the interactive mode, tmap is using leaflet for R API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.3 Converting sf data frames to sp’s Spatial* Class",
    "text": "4.3 Converting sf data frames to sp’s Spatial* Class\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nsummary(childcare)\n\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 11203.01 45404.24\ncoords.x2 25667.60 49300.88\ncoords.x3     0.00     0.00\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1545\nData attributes:\n     Name           Description       \n Length:1545        Length:1545       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsummary(mpsz)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2667.538 56396.44\ny 15748.721 50256.33\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    OBJECTID       SUBZONE_NO      SUBZONE_N          SUBZONE_C        \n Min.   :  1.0   Min.   : 1.000   Length:323         Length:323        \n 1st Qu.: 81.5   1st Qu.: 2.000   Class :character   Class :character  \n Median :162.0   Median : 4.000   Mode  :character   Mode  :character  \n Mean   :162.0   Mean   : 4.625                                        \n 3rd Qu.:242.5   3rd Qu.: 6.500                                        \n Max.   :323.0   Max.   :17.000                                        \n    CA_IND           PLN_AREA_N         PLN_AREA_C          REGION_N        \n Length:323         Length:323         Length:323         Length:323        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   REGION_C           INC_CRC            FMEL_UPD_D             X_ADDR     \n Length:323         Length:323         Min.   :2014-12-05   Min.   : 5093  \n Class :character   Class :character   1st Qu.:2014-12-05   1st Qu.:21864  \n Mode  :character   Mode  :character   Median :2014-12-05   Median :28465  \n                                       Mean   :2014-12-05   Mean   :27257  \n                                       3rd Qu.:2014-12-05   3rd Qu.:31674  \n                                       Max.   :2014-12-05   Max.   :50425  \n     Y_ADDR        SHAPE_Leng        SHAPE_Area      \n Min.   :19579   Min.   :  871.5   Min.   :   39438  \n 1st Qu.:31776   1st Qu.: 3709.6   1st Qu.:  628261  \n Median :35113   Median : 5211.9   Median : 1229894  \n Mean   :36106   Mean   : 6524.4   Mean   : 2420882  \n 3rd Qu.:39869   3rd Qu.: 6942.6   3rd Qu.: 2106483  \n Max.   :49553   Max.   :68083.9   Max.   :69748299  \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\nsummary(sg)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2663.926 56047.79\ny 16357.981 50244.03\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    GDO_GID          MSLINK          MAPID    COSTAL_NAM       \n Min.   : 1.00   Min.   : 1.00   Min.   :0   Length:60         \n 1st Qu.:15.75   1st Qu.:17.75   1st Qu.:0   Class :character  \n Median :30.50   Median :33.50   Median :0   Mode  :character  \n Mean   :30.50   Mean   :33.77   Mean   :0                     \n 3rd Qu.:45.25   3rd Qu.:49.25   3rd Qu.:0                     \n Max.   :60.00   Max.   :67.00   Max.   :0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.4 Converting the Spatial* class into generic sp format",
    "text": "4.4 Converting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n\n\n\n\nDifferences between Spatial* classes and generic sp object\n\n\n\nThe variables, names, min and max values are not included in the sp object but are in the Spatial* classes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.5 Converting the generic sp format into spatstat’s ppp format",
    "text": "4.5 Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.6 Handling Duplicated Points",
    "text": "4.6 Handling Duplicated Points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n(tmap_mode code edited on 9 September)\n\n# tmap_mode('view')\ntmap_mode('plot')\n\ntmap mode set to plotting\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\n\n\n# tmap_mode(\"plot\")\n\n\n\n\n\n\n\nSpotting duplicates from the map\n\n\n\nWe can zoom into the map and look closely to the points. There are some points where they have a darker shade compared to the others. Those points with darker shade may indicate duplicated points since it could be a result of overlapping.\n\n\nHow to overcome the problem of data duplicates?\nThere are three ways to overcome this problem.\n\nThe easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nNext, we will check if there is still any duplicated points in our dataset.\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.7 Creating owin object",
    "text": "4.7 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-event-objects-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-event-objects-and-owin-object",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.8 Combining point event objects and owin object",
    "text": "4.8 Combining point event objects and owin object\nIn this step, I will extract childcare events that are located within Singapore using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\n\n5.1.1 Computing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nIn the code chunk below, I retrieve the bandwidth used to compute the kde layer.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n5.1.2 Rescalling KDE values\nIn the code chunk below, rescale.ppp() is used to covert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nThe output image looks identical to the earlier version, the only changes in the data values (refer to the legend)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-bandwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-bandwidth-methods",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Working with different automatic bandwidth methods",
    "text": "5.2 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Working with different kernel methods",
    "text": "5.3 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.4 Fixed and Adaptive KDE",
    "text": "5.4 Fixed and Adaptive KDE\n\n5.4.1 Computing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n5.4.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n5.4.3 Converting KDE output into grid object\n\nlibrary(spatial)\n\n\nAttaching package: 'spatial'\n\n\nThe following object is masked from 'package:spatstat.model':\n\n    Strauss\n\nlibrary(sp)\n\n\n# Debugging: check if object class is im\nif (\"im\" %in% class(kde_childcareSG.bw)) {\n  print(\"The object is of class 'im'\")\n} else {\n  print(\"The object is not of class 'im'\")\n}\n\n[1] \"The object is of class 'im'\"\n\n\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n5.4.3.1 Converting gridded output into raster\nNext, I will do the conversion using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\nObserve the properties of the raster layer.\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNotice the crs value is NA.\n\n\n5.4.3.2 Assigning project system\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\n\n5.4.4 Visualising the output map\nFinally, we can display the raster in cartographic quality map using tmap packages.\n\ntm_shape(kde_childcareSG_bw_raster) + tm_raster(\"layer\", palette = \"viridis\") + tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nThe raster values are encoded explicitly onto the raster pixel using the values in “v” field.\n\n\n5.4.5 Comparing Spatial Point Patterns using KDE\nIn this section, I will compare KDE of childcare at Ponggol, Tampines, Chua Chu Kand and Jurong West planning area. #### 5.4.5.1 Extracting study area\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlot the planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n5.4.5.2 Creating owin object\nHere, we will convert the sf objects into owin objects that is required by spatstat.\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n5.4.5.3 Combining childcare points and study area\nThe code chunk below extracts childcare that is within the specific region.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, use rescale.ppp() function to transform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThen, plot the four study areas together with their respective childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n5.4.5.4 Computing KDE\nThe code chunk below is used to compute the KDE of the four planning areas. bw.biggle method is used to derive the bandwidth of each planning area.\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n\n\n\n\n5.4.5.5 Computing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.5 Nearest Neighbour Analysis",
    "text": "5.5 Nearest Neighbour Analysis\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\n5.5.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nConclusion: At p&lt;0.05, we reject the null hypothesis that the childcare services are randomly distributed.\n\n\n5.5.2 Clark and Evans Test: Choa Chu Kang planning area\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.90671, p-value = 0.1634\nalternative hypothesis: two-sided\n\n\nConclusion: At p&gt;0.05, we cannot reject the null hypothesis that the childcare services are randomly distribued in Choa Chu Kang.\n\n\n5.5.3 Clark and Evans Test: Tampines planning area\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.77933, p-value = 6.817e-05\nalternative hypothesis: two-sided\n\n\nConclusion: At p&lt;0.05, we reject the null hypothesis that the childcare services are randomly distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Analysing Spatial Point Process Using G-Function",
    "text": "6.1 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n6.1.1 Choa Chu Kang planning area\n####6.1.1.1 Computing G-function estimation The code chunk below is used to compute G-function using Gest() of spastat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n6.1.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n6.1.2 Tampines Planning Area\n\n6.1.2.1Computing G-function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n6.1.2.1 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Analysing Spatial Point Process Using F-Function",
    "text": "6.2 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n6.2.1 Choa Chu Kang planning area\n\n6.2.1.1 Computing F-function estimation\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n\n6.2.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\nWe will plot the results now.\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n6.2.3 Tampiens planning area\n\n6.2.3.1 Computing F-function estimation\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n6.2.3.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Analysing Spatial Point Process Using K-function",
    "text": "6.3 Analysing Spatial Point Process Using K-function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n6.3.1 Choa Chu Kang Planning Area\n\n6.3.1.1 Computing K-function estimate\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n6.3.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr)\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Tampines Planning Area\n\n6.3.2.1 Computing K-function estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n6.3.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Ex 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.4 Analysing Spatial Point Process Using L-function",
    "text": "6.4 Analysing Spatial Point Process Using L-function\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n6.4.1 Choa Chu Kang Planning area\n\n6.4.1.1 Computing L-function estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n6.4.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n6.4.2 Tampines planning area\n\n6.4.2.1 Computing L-function estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n6.4.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Ex1",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n• installing and loading sf (https://r-spatial.github.io/sf/) and tidyverse (https://www.tidyverse.org/) packages into R environment,\n• importing geospatial data by using appropriate functions of sf package,\n• importing aspatial data by using appropriate function of readr package,\n• exploring the content of simple feature data frame by using appropriate Base R and sf functions,\n• assigning or transforming coordinate systems by using using appropriate sf functions,\n• converting an aspatial data into a sf data frame by using appropriate function of sf package,\n• performing geoprocessing tasks by using appropriate functions of sf package,\n• performing data wrangling tasks by using appropriate functions of dplyr package and\n• performing Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-acquisition",
    "title": "Hands-on Ex1",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nData are key to data analytics including geospatial analytics. Hence, before analysing, I will be extracting the necessary datasets from the following sources:\n• Master Plan 2014 Subzone Boundary (Web) from data.gov.sg (https://data.gov.sg/)\n• Pre-Schools Location from data.gov.sg (https://data.gov.sg/)\n• Cycling Path from LTADataMall (https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n• Latest version of Singapore Airbnb listing data from Inside Airbnb (http://insideairbnb.com/get-the-data.html)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-packages",
    "title": "Hands-on Ex1",
    "section": "2.2 R packages",
    "text": "2.2 R packages\nIn this hands-on exercise, two R packages will be used. They are:\n• sf for importing, managing, and processing geospatial data, and\n• tidyverse for performing data science tasks such as importing, wrangling and visualising data.\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n• readr for importing csv data,\n• readxl for importing Excel worksheet,\n• tidyr for manipulating data,\n• dplyr for transforming data, and\n• ggplot2 for visualising data\nTo install the required packages: sf and tidyverse, I used the code chunk below:\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-polygon-feature-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-polygon-feature-data-in-shapefile-format",
    "title": "Hands-on Ex1",
    "section": "3.1 Importing polygon feature data in shapefile format",
    "text": "3.1 Importing polygon feature data in shapefile format\nThe dataset that is used here is “MP14_SUBZONE_WEB_PL” where the file format is shapefile. It is being imported to R as a polygon feature data frame.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n        layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Nathania02\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe output shows that there are 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-polyline-feature-data-in-shapefile-form",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-polyline-feature-data-in-shapefile-form",
    "title": "Hands-on Ex1",
    "section": "3.2 Importing polyline feature data in shapefile form",
    "text": "3.2 Importing polyline feature data in shapefile form\nThe dataset that is used here is “CyclingPathGazette” where the file format is shapefile. It is being imported to R as a polyline feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Nathania02\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe output shows that in the cyclingpath linestring feature, there are 3138 features and 2 fields. This dataset is also in the svy21 projected coordinates system too."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "title": "Hands-on Ex1",
    "section": "3.3 Importing GIS data in kml format",
    "text": "3.3 Importing GIS data in kml format\nThe dataset that is used here is “pre-schools-location-kml” where the file format is kml. It is being imported to R as a point feature data frame.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Nathania02\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe output shows that preschool is a point feature data frame. There are 2290 features and 2 fields and is different from the previous two datasets where it is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "title": "Hands-on Ex1",
    "section": "4.1 Working with st_geometry()",
    "text": "4.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "title": "Hands-on Ex1",
    "section": "4.2 Working with glimpse()",
    "text": "4.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "title": "Hands-on Ex1",
    "section": "4.3 Working with head()",
    "text": "4.3 Working with head()\nSometimes we would like to reveal complete information of a feature object, this is the job of head() (https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Ex1",
    "section": "6.1 Assigning EPSG code to a simple feature data frame",
    "text": "6.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414 (https://epsg.io/3414). (https://epsg.io/3414)\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\nmpsz3414&lt;-st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "title": "Hands-on Ex1",
    "section": "6.2 Transforming the projection of preschool from wgs84 to svy21.",
    "text": "6.2 Transforming the projection of preschool from wgs84 to svy21.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nI will take the preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\nGeometry set for 2290 features Geometry type: POINT Dimension: XYZ Bounding box: xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134 z_range: zmin: 0 zmax: 0 Geodetic CRS: WGS 84 First 5 geometries:\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool3414&lt;-st_transform(preschool,crs=3414)\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\nNext, let us display the content of preschool3414 sf data frame as shown below. Geometry set for 2290 features Geometry type: POINT Dimension: XYZ Bounding box: xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88 z_range: zmin: 0 zmax: 0 Projected CRS: SVY21 / Singapore TM First 5 geometries: Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-aspatial-data",
    "title": "Hands-on Ex1",
    "section": "7.1 Importing the aspatial data",
    "text": "7.1 Importing the aspatial data\nSince listings data set is in csv file format, we will use read_csv() (https://readr.tidyverse.org/reference/read_delim.html) of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame (https://r4ds.had.co.nz/tibbles.html). (https://r4ds.had.co.nz/tibbles.html)\n\nlistings&lt;-read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly. The code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output reveals that listing tibble data frame consists of 3540 rows and 18 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Ex1",
    "section": "7.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "7.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() (https://r-spatial.github.io/sf/reference/st_as_sf.html) of sf packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above: • coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates. • crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 (https://epsg.io/4326) is wgs84 Geographic Coordinate System and EPSG: 3414 (https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io (https://epsg.io/). (https://epsg.io/) • %&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system. Let us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Ex1",
    "section": "8.1 Buffering",
    "text": "8.1 Buffering\nThe scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area. The solution: Firstly, st_buffer() (https://r-spatial.github.io/sf/reference/geos_unary.html) of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA&lt;-st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Ex1",
    "section": "8.2 Point-in-polygon count",
    "text": "8.2 Point-in-polygon count\nThe scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution: The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects() (https://r-spatial.github.io/sf/reference/geos_binary_pred.html). (https://r-spatial.github.io/sf/reference/geos_binary_pred.html) Next, length() (https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() (https://dplyr.tidyverse.org/reference/top_n.html) of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414,1,`PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nNext, I calculate the density of pre-school by planning subzone. Firstly, the code chunk below uses st_area() (https://r-spatial.github.io/sf/reference/geos_measures.html) of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, mutate() (https://dplyr.tidyverse.org/reference/mutate.html) of dplyr (https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.\n\nmpsz3414&lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "Thematic mapping involved the use of map symbols to visualise selected properties of geographic features that are not naturally visible. On the other hand, Geovisualisation works by providing graphical ideation to render a place, a phenomenon or a process visible."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-acquisition",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nTwo dataset will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#r-setup",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#r-setup",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "2.2 R Setup",
    "text": "2.2 R Setup\nIn this hands-on exercise, the key R package that I will use is tmap package. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nBelow is the code chunk that will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\nI only installed tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "4.1 Data Wrangling",
    "text": "4.1 Data Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n(Code modified on August 25, 2024)\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\nrowSums(.[15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-attribute-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-attribute-and-geospatial-data",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "4.2 Joining attribute and geospatial data",
    "text": "4.2 Joining attribute and geospatial data\nBefore performing the georelational join, I will convert the values in PA and SZ fields to uppercase. This is because the values in these fields are inconsistent where they are made up of upper and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join of dplyr is used to join the geographical data and attribute table using planning subzone name as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.1 Plotting a choropleth map quickly by using qtm()",
    "text": "5.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.2 Creating a choropleth map by using tmap’s elements",
    "text": "5.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n5.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons is used to draw the planning subzone polygons.\n\ntm_shape(mpsz_pop2020) +tm_polygons()\n\n\n\n\n\n\n\n\n\n\n5.2.2 Drawing a choropleth map using tm_polygons\n\ntm_shape(mpsz_pop2020) +tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n5.2.3 Drawing a choropleth map using tm_fill and *tm_border()**\nThe code chunk below uses tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nIn order to add boundaries of the planning subzones, tm_borders will be added in the code chunk below.\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1,  alpha = 1, col=\"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-methods-of-tmap",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.3 Data Classification Methods of tmap",
    "text": "5.3 Data Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n5.3.1 Plotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n5.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.5661  0.6179  0.6942  0.6941 19.0000      92 \n\n\nFrom the results above, the break point will be 0.60, 0.70, 0.80 and 0.90. We also need to include a minimum and maximum which will be set at 0 and 100. The breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, using the code chunk below, I will plot the choropleth map.\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.4 Colour Scheme",
    "text": "5.4 Colour Scheme\n\n5.4.1 Using ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\",palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.5 Map Layouts",
    "text": "5.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n5.5.1 Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n5.5.2 Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n5.5.3 Cartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, the code chunk below is used.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.6 Drawing small multiple Choropleth Maps",
    "text": "5.6 Drawing small multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n5.6.1 Assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n5.6.2 Defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\n5.6.2 Creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Ex 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.7 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "5.7 Mapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Ex 4: Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nIn this hands-on exercise, I will be using appropriate functions of spNetwork package:\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-acquisition",
    "title": "Hands-on Ex 4: Network Constrained Spatial Point Patterns Analysis",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nIn this study, I will analyse the spatial distribution of childcare centre in Punggol planning area. Two geospatial data sets will be used:\n\nPunggol_St, a line features geospatial data which store the road network within Punggol Planning Area.\nPunggol_CC, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#r-setup",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#r-setup",
    "title": "Hands-on Ex 4: Network Constrained Spatial Point Patterns Analysis",
    "section": "2.2 R Setup",
    "text": "2.2 R Setup\n4 packages will be used in this exercise:\n\nspNetwork, which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\npacman::p_load(sf, spNetwork, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. At the end of this hands-on exercise, I will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package\n\nprovide statistically correct interpretation of GSA statistics.\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-acquisition",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "2.1 Data Acquisition",
    "text": "2.1 Data Acquisition\nTwo datasets will be used. Hunan province administrative boundary layer at county level and Hunan_2012.csv which contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#r-packages",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "2.2 R packages",
    "text": "2.2 R packages\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#perform-relational-join",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#perform-relational-join",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "3.1 Perform relational join",
    "text": "3.1 Perform relational join\n\nhunan &lt;- left_join(hunan, hunan_2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-regional-development-indicator",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "3.2 Visualising Regional Development Indicator",
    "text": "3.2 Visualising Regional Development Indicator\nI will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "4.1 Computing Contiguity Spatial Weights",
    "text": "4.1 Computing Contiguity Spatial Weights\nBefore computing the global spatial autocorrelation statistics, spatial weights of the study area need to be constructed. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. From the documentation, useres can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are 2 area units with only one neighbours."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2 Row-standardised weights matrix",
    "text": "4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In this case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#marons-i-test",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#marons-i-test",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "5.1 Maron’s I test",
    "text": "5.1 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nIt shows that there is a weak positive spatial autocorrelation in the variable GDPPC, where regions with similar values tend to be spatially clustered together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-morans-i",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "5.2 Computing Monte Carlo Moran’s I",
    "text": "5.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() od spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe p-value is less than 0.05 which means that the spatial pattern observed is unlikely to be the result of random chance. Hence, the null hypothesis of no spatial autocorrelation is rejected. The areas with similar values of GDPPC are more likely to be located near each other."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-monte-carlo-morans-i",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "5.3 Visualising Monte Carlo Moran’s I",
    "text": "5.3 Visualising Monte Carlo Moran’s I\nIt is a good practice to examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below. In the code chunk below hist() and abline() of R graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nThe mean of simulated Moran’s I statistics is -0.01504572. This is close to 0 which is what is expected under the null hypothesis of spatial randomness. The variance is 0.004371574. This gives us an idea of the spread of the Moran’s I statistics under the null hypothesis. The histogram provide a visual representation, with a vertical reed line at 0 to represent the expected value under the null hypothesis.\n\ndf &lt;- data.frame(MoranI = bperm$res[1:999])\nggplot(df, aes(x = MoranI)) +\n  geom_histogram(bins = 20, fill = \"grey\", color = \"black\") +\n  geom_vline(aes(xintercept = 0.05), color = \"red\", linetype = \"dashed\") +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\") +\n  ggtitle(\"Histogram of Simulated Moran's I\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gearys-c-test",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "6.1 Geary’s C test",
    "text": "6.1 Geary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nThe Geary’s C statistics is 0.6907223, which is significantly different from the expectation under the null hypothesis is 1. It suggests that there is a significant local spatial structure in the data. The standard deviation is 3.6108. The p-value is less than 0.05 which indicates that the spatial pattern is unlikely to be the result of random chance. We reject the null hypothesis of no spatial autocorrelation. Ths areas with similar values are more likely to be clustered than randomly distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-monte-carlo-gearys-c",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "6.2 Computing Monte Carlo Geary’s C",
    "text": "6.2 Computing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe p-value is less than 0.05 which means that the pattern is unlikely to be result of the random chance. The null hypothesis of no spatial autocorrelation is rejected. The areas with similar values are more likely to be located near each other."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-monte-carlo-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-monte-carlo-gearys-c",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "6.3 Visualising the Monte Carlo Geary’s C",
    "text": "6.3 Visualising the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\nThe mean is 1.004402 which is close to 0 and this is what we would expect under the null hypothesis of spatial randomness. The variance is 0.007436493 which tells the spread under the null hypothesis. With the vertical red line at Geary’s C=1 in the histogram, it represents the expected value under the null hypothesis of no spatial autocorrelation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-morans-i-correlogram",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "7.1 Compute Moran’s I correlogram",
    "text": "7.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe p-values are less than 0.05 for lags 1, 2, 3, 5, 6 which indicates that the spatial autocorrelation at these distances is statistically significant. For lag 4, the p-value is greater than 0.05, which shows that the spatial autocorrelation at this distance is not statistically significant. For lag 1 to 4, the statistic is positive which proves positive spatial autocorrelation at these distances. For lag 5 and 6, the statistic is negative which indicates negative spatial autocorrelation at these distances."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram-and-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-gearys-c-correlogram-and-plot",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "7.2 Compute Geary’s C correlogram and plot",
    "text": "7.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-contiguity-spatial-weights-1",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "9.1 Computing COntiguity Spatial Weights",
    "text": "9.1 Computing COntiguity Spatial Weights\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix-1",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "9.2 Row-standardised weights matrix",
    "text": "9.2 Row-standardised weights matrix\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-local-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-local-morans-i",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "9.3 Computing local Moran’s I",
    "text": "9.3 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\nIi: the local Moran’s I statistics E.Ii: the expectation of local moran statistic under the randomisation hypothesis Var.Ii: the variance of local moran statistic under the randomisation hypothesis Z.Ii:the standard deviate of local moran statistic Pr(): the p-value of local moran statistic\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n9.3.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n9.3.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n9.3.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n9.3.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-morans-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-morans-scatterplot",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "10.1 Plotting Moran’s scatterplot",
    "text": "10.1 Plotting Moran’s scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n        labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "10.2 Plotting Moran scatterplot with standardised variable",
    "text": "10.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,                  labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#preparing-lisa-map-classes",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#preparing-lisa-map-classes",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "10.3 Preparing LISA map classes",
    "text": "10.3 Preparing LISA map classes\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC) \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.5\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]-mean(localMI[,1])   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-lisa-map",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "10.4 Plotting LISA map",
    "text": "10.4 Plotting LISA map\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI)+\n  tm_fill(col = \"quadrant\",\n          style=\"cat\",\n          palette=colors[c(sort(unique(quadrant)))+1],\n          labels=clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\"))+\n  tm_view(set.zoom.limits=c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\",\n          style = \"cat\",\n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap,\n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map for easy comparison.\n\ntmap_arrange(gdppc, LISAmap,localMI.map, pvalue.map, asp=2, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nFrom the LISA map above, the areas tht are coloured red (high-high) are hot spots where there is signs of clustering. Both the location and neighbours have high values which indicates the region of high GDP per capita. On the other hand, those areas coloured blue (low-low) are cold spots where the location and neighbours have low values, indicating random distribution.\nFor areas that are coloured orange (low-high), it may be outliers or transition areas which need further investigation. Those coloured in teal (high-low) are transition areas where the values is high but the neighbours values is low. Those areas coloured in white do not show significant local spatial association and do not fit into any clusters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getis-and-ords-g-statistics",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "11.1 Getis and Ord’s G-Statistics",
    "text": "11.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#deriving-distance-based-weight-matrix",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "11.2 Deriving distance-based weight matrix",
    "text": "11.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n11.2.1 Deriving the centroid\nThe points need to associate with each polygon before I can make the connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. I need the coordinates in a separate data frame for this to work. To do this I will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. My input vector will be the geometry column of us.bound. My function will be st_centroid(). I will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get the longitude values I map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows me to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n11.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n10.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "11.3 Computing adaptive distance weight matrix",
    "text": "11.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-fixed-distance",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "12.1 Gi statistics using fixed distance",
    "text": "12.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, I will join the Gi values to their corresponding hunan sf data frame.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "12.2 Mapping Gi values with fixed distance weights",
    "text": "12.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the function used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nFrom the plots above, there are hot spots in the northeast. There are also cold spots that were previously not visible when using a distance weight matrix derived with a fixed bandwidth of 62km."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#gi-statistics-using-adaptive-distance",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "12.3 Gi statistics using adaptive distance",
    "text": "12.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Hands-on Ex 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "12.4 Mapping Gi values with adaptive distance weights",
    "text": "12.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nSimilarly to the plot above, the hot spots are in the northeast. The cold spots are in the south west area."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex02/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Ex 3",
    "section": "",
    "text": "1.0 Discussion of Issues from Hands-on Ex03\nmaptools is retired and binary is removed from CRAN. However, we download from Posit Public Manager snapshots\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Nathania02\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\n\n\nplot(sg_sf)\n\n\n\n\n\n\n\n\n\n\n2.0 Importing Data for In-class Ex\n\nacled_sf &lt;- read_csv(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"), crs=4326) %&gt;% \n  st_transform(crs = 32647) %&gt;% \n  mutate(event_date = dmy(event_date))\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Ex 4",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-and-preparing-study-area-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-and-preparing-study-area-data",
    "title": "In-class Ex 4",
    "section": "Importing and preparing Study Area Data",
    "text": "Importing and preparing Study Area Data\n\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") \n\nIn kbb, there are a few issues that we need to fix. - The geometry type is Polygon Z. If we want to use ppp later on, polygon z will create errors. - Need to drop Z entities - Coordinate system might need to be edited\n\nkbb_sf = st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;% \n   st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs=32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Nathania02\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-and-preparing-forest-fire-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-and-preparing-forest-fire-data",
    "title": "In-class Ex 4",
    "section": "Importing and Preparing Forest Fire Data",
    "text": "Importing and Preparing Forest Fire Data\nRemove latitude and longitude columns\n\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs=4326) %&gt;%\n  st_transform(crs=32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nBecause ppp object only accept numerical or character as mark. The below code chunk is used to convert data type of acq_date to numeric\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayofYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;% \n  mutate(Month_fac = month(acq_date, \n                            label=TRUE, \n                            abbr=FALSE))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#extract-forest-fires-by-month",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#extract-forest-fires-by-month",
    "title": "In-class Ex 4",
    "section": "Extract forest fires by month",
    "text": "Extract forest fires by month\n\nfire_month &lt;- fire_sf %&gt;% \n  select(Month_num)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-ppp",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-ppp",
    "title": "In-class Ex 4",
    "section": "Creating ppp",
    "text": "Creating ppp\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Ex 6",
    "section": "",
    "text": "pacman::p_load(sf, tmap, sfdep, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#deriving-queens-contiguity-weights",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#deriving-queens-contiguity-weights",
    "title": "In-class Ex 6",
    "section": "3.1 Deriving Queen’s contiguity weights",
    "text": "3.1 Deriving Queen’s contiguity weights\n\nwm_q &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style=\"W\"),\n         .before=1)\n\nst_weights provide three arguments - nb (a neighbour list object as created by st_neighbours), style (default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minimax” and “S”. B is the basic binary coding, W is row standardized - sums over all links to n, C is globally standardised - sums over all links to n, U C/number of neighbours - sums over all links to unity, while S is the variance stabilizing coding scheme proposed by Tiefelsdorf et al. 1999), allow_zero (if TRUE, assigns 0 as lagged value to zone without neighbours.)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-global-morans-i",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-global-morans-i",
    "title": "In-class Ex 6",
    "section": "3.2 Computing Global Moran’s I",
    "text": "3.2 Computing Global Moran’s I\n\nmoranI &lt;- global_moran(wm_q$GDPPC, wm_q$nb, wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#performing-global-morans-i-test",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#performing-global-morans-i-test",
    "title": "In-class Ex 6",
    "section": "3.3 Performing Global Moran’s I test",
    "text": "3.3 Performing Global Moran’s I test\n\nglobal_moran_test(wm_q$GDPPC, wm_q$nb, wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\np-value&lt;0.05, null hypothesis is rejected. Moran I statistics is positive at 0.3 which means low clustering."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#performing-global-morans-permutation-test",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#performing-global-morans-permutation-test",
    "title": "In-class Ex 6",
    "section": "3.4 Performing Global Moran’s Permutation test",
    "text": "3.4 Performing Global Moran’s Permutation test\n\nset.seed(1234) # ensure that computation is reproducible\nglobal_moran_perm(wm_q$GDPPC, wm_q$nb, wm_q$wt, nsim=99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-local-morans-i",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-local-morans-i",
    "title": "In-class Ex 6",
    "section": "4.1 Computing local Moran’s I",
    "text": "4.1 Computing local Moran’s I\n\nlisa &lt;- wm_q%&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim=99),\n    .before=1) %&gt;%\n  unnest(local_moran) # put it back to one single tibble table"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-local-morans-i",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-local-morans-i",
    "title": "In-class Ex 6",
    "section": "4.2 Visualising local Moran’s I",
    "text": "4.2 Visualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) + tm_fill(\"ii\") + tm_borders(alpha=0.5) + tm_view(set.zoom.limits = c(6,8)) + tm_layout(main.title=\"local Moran's I of G\", main.title.size = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-p-value-of-local-morans-i",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-p-value-of-local-morans-i",
    "title": "In-class Ex 6",
    "section": "4.3 Visualising p-value of local Moran’s I",
    "text": "4.3 Visualising p-value of local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) + tm_fill(\"p_ii_sim\") + tm_borders(alpha=0.5) + tm_view(set.zoom.limits = c(6,8)) + tm_layout(main.title=\"p-value of local Moran's I of G\", main.title.size = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-local-morans-i-and-p-value",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-local-morans-i-and-p-value",
    "title": "In-class Ex 6",
    "section": "4.4 Visualising local Moran’s I and p-value",
    "text": "4.4 Visualising local Moran’s I and p-value\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) + tm_fill(\"ii\") + tm_borders(alpha=0.5) + tm_view(set.zoom.limits = c(6,8)) + tm_layout(main.title=\"local Moran's I of G\", main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) + tm_fill(\"p_ii\", breaks = c(0, 0.001, 0.01, 0.05, 1), labels=c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + tm_borders(alpha=0.5) + tm_view(set.zoom.limits = c(6,8)) + tm_layout(main.title=\"p-value of local Moran's I of G\", main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-local-gi-statistics",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#computing-local-gi-statistics",
    "title": "In-class Ex 6",
    "section": "6.1 Computing local Gi* statistics",
    "text": "6.1 Computing local Gi* statistics\nWill need to derive a spatial weight matrix before computing local Gi* statistics.\n\nwm_idw &lt;- hunan_GDPPC %&gt;% \n  mutate(nb=st_contiguity(geometry),\n         wts=st_inverse_distance(nb, geometry, scale=1, alpha=1),\n         .before=1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nHCSA &lt;- wm_idw%&gt;% \n  mutate(local_Gi = local_gstar_perm(\n  GDPPC, nb, wt, nsim=99),\n  .before=1) %&gt;% \n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-hot-spot-and-cold-spot-areas",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#visualising-hot-spot-and-cold-spot-areas",
    "title": "In-class Ex 6",
    "section": "6.2 Visualising hot spot and cold spot areas",
    "text": "6.2 Visualising hot spot and cold spot areas\n\nHCSA_sig &lt;- HCSA %&gt;% filter(p_sim&lt;0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) + tm_polygons() + tm_borders(alpha=0.05) + tm_shape(HCSA_sig) + tm_fill(\"gi_star\") + tm_borders(alpha=0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nFigure above revelas that there is one hot spot area and two cold pot areas. The hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Assignment 1",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict – wars – every year.\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\nIn this exercise, there are a few task that will be done to find out more about the conflicts in Myanmar. They are as follows:\n\nUsing appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers. Using the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps.\n\n\n\nI will be using the following packages in my project:\n\nsf for importing, managing and processing geospatial data\nraster reads, writes, manipulates, analyses and model of gridded spatial data (raster)\nspatstat which provides a wide range of useful functions for point pattern analysis\ntmap which provides functions for plotting cartographic quality static or interactive maps\ntidyverse to perform common data science tasks including and not limited to data import, data transformation, data wrangling and data visualisation\nsparr to estimate fixed and adaptive kernel-smoothed spatial relative risks surfaces\nviridis which provides color palettes that are perceptually uniform\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, viridis, sparr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-packages",
    "title": "Take Home Assignment 1",
    "section": "",
    "text": "I will be using the following packages in my project:\n\nsf for importing, managing and processing geospatial data\nraster reads, writes, manipulates, analyses and model of gridded spatial data (raster)\nspatstat which provides a wide range of useful functions for point pattern analysis\ntmap which provides functions for plotting cartographic quality static or interactive maps\ntidyverse to perform common data science tasks including and not limited to data import, data transformation, data wrangling and data visualisation\nsparr to estimate fixed and adaptive kernel-smoothed spatial relative risks surfaces\nviridis which provides color palettes that are perceptually uniform\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, viridis, sparr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-polygon-feature-data---boundary-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-polygon-feature-data---boundary-data",
    "title": "Take Home Assignment 1",
    "section": "2.1 Importing polygon feature data - boundary data",
    "text": "2.1 Importing polygon feature data - boundary data\nTo start off, I import the Myanmar boundary layer. This is extracted from the Myanmar Information Management Unit, MIMU: https://geonode.themimu.info/layers/geonode%3Ammr_polbnda_adm1_250k_mimu_1\n\nboundary_data_sf &lt;- st_read(dsn = \"data\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Nathania02\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(boundary_data_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nI transformed the CRS to 32647 which is the coordinates of Myanmar to ensure that everything is mapped correctly and if there is a need to overlay different datasets, it would be accurate.\n\nboundary_data_sf &lt;- boundary_data_sf %&gt;% st_transform(crs = 32647)\nst_crs(boundary_data_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-conflict-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-conflict-data",
    "title": "Take Home Assignment 1",
    "section": "2.2 Importing conflict data",
    "text": "2.2 Importing conflict data\nI then import the conflict data which I converted the latitude and longitude to standardized the projection system and changed the CRS to Myanmar coordinate which is 32647.\n\nacled_data_sf &lt;- read_csv(\"data/2021-01-01-2024-06-30-Southeast_Asia-Myanmar.csv\") \n\nRows: 51553 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nsummary(acled_data_sf)\n\n event_id_cnty       event_date             year      time_precision \n Length:51553       Length:51553       Min.   :2021   Min.   :1.000  \n Class :character   Class :character   1st Qu.:2021   1st Qu.:1.000  \n Mode  :character   Mode  :character   Median :2022   Median :1.000  \n                                       Mean   :2022   Mean   :1.045  \n                                       3rd Qu.:2023   3rd Qu.:1.000  \n                                       Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:51553       Length:51553       Length:51553       Length:51553      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:51553       Min.   :1.000   Length:51553       Length:51553      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :2.000   Mode  :character   Mode  :character  \n                    Mean   :2.648                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:51553       Min.   :104  \n 1st Qu.:0.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :1.000   Median :17.00   Mode  :character   Median :104  \n Mean   :2.992   Mean   :25.33                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:33.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:51553       Length:51553       Length:51553       Length:51553      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location            latitude        longitude     \n Length:51553       Length:51553       Min.   : 9.982   Min.   : 92.18  \n Class :character   Class :character   1st Qu.:18.465   1st Qu.: 95.08  \n Mode  :character   Mode  :character   Median :21.771   Median : 96.07  \n                                       Mean   :20.683   Mean   : 95.97  \n                                       3rd Qu.:22.698   3rd Qu.: 97.03  \n                                       Max.   :27.505   Max.   :100.36  \n geo_precision      source          source_scale          notes          \n Min.   :1.000   Length:51553       Length:51553       Length:51553      \n 1st Qu.:1.000   Class :character   Class :character   Class :character  \n Median :2.000   Mode  :character   Mode  :character   Mode  :character  \n Mean   :1.508                                                           \n 3rd Qu.:2.000                                                           \n Max.   :3.000                                                           \n   fatalities          tags             timestamp        \n Min.   :  0.000   Length:51553       Min.   :1.611e+09  \n 1st Qu.:  0.000   Class :character   1st Qu.:1.702e+09  \n Median :  0.000   Mode  :character   Median :1.713e+09  \n Mean   :  1.062                      Mean   :1.702e+09  \n 3rd Qu.:  1.000                      3rd Qu.:1.719e+09  \n Max.   :201.000                      Max.   :1.725e+09  \n\n\n\nst_crs(acled_data_sf)\n\nCoordinate Reference System: NA\n\n\n\nacled_data_sf &lt;- acled_data_sf %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"), crs=4326) %&gt;% \n  st_transform(crs = 32647) %&gt;% \n  mutate(event_date = dmy(event_date))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#myanmar-boundaries",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#myanmar-boundaries",
    "title": "Take Home Assignment 1",
    "section": "3.1 Myanmar Boundaries",
    "text": "3.1 Myanmar Boundaries\nBelow is the plot of the Myanmar boundary map.\n\nplot(st_geometry(boundary_data_sf))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#group-the-dataset-based-on-quarterly",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#group-the-dataset-based-on-quarterly",
    "title": "Take Home Assignment 1",
    "section": "3.2 Group the dataset based on quarterly",
    "text": "3.2 Group the dataset based on quarterly\nSince my plots will be based on quarterly, I grouped the dataset quarterly based on the quarter column.\n\nconflict_2021_1q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2021.1, ]\nconflict_2021_2q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2021.2, ]\nconflict_2021_3q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2021.3, ]\nconflict_2021_4q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2021.4, ]\nconflict_2022_1q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2022.1, ]\nconflict_2022_2q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2022.2, ]\nconflict_2022_3q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2022.3, ]\nconflict_2022_4q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2022.4, ]\nconflict_2023_1q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2023.1, ]\nconflict_2023_2q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2023.2, ]\nconflict_2023_3q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2023.3, ]\nconflict_2023_4q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2023.4, ]\nconflict_2024_1q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2024.1, ]\nconflict_2024_2q &lt;- conflict_events_sf[conflict_events_sf$quarter == 2024.2, ]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-dataframes-to-sps-spatial-class",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-dataframes-to-sps-spatial-class",
    "title": "Take Home Assignment 1",
    "section": "3.3 Convert the dataframes to sp’s Spatial class",
    "text": "3.3 Convert the dataframes to sp’s Spatial class\n\nconflict_2021_1q_spatial &lt;- as_Spatial(conflict_2021_1q)\nconflict_2021_2q_spatial &lt;- as_Spatial(conflict_2021_2q)\nconflict_2021_3q_spatial &lt;- as_Spatial(conflict_2021_3q)\nconflict_2021_4q_spatial &lt;- as_Spatial(conflict_2021_4q)\nconflict_2022_1q_spatial &lt;- as_Spatial(conflict_2022_1q)\nconflict_2022_2q_spatial &lt;- as_Spatial(conflict_2022_2q)\nconflict_2022_3q_spatial &lt;- as_Spatial(conflict_2022_3q)\nconflict_2022_4q_spatial &lt;- as_Spatial(conflict_2022_4q)\nconflict_2023_1q_spatial &lt;- as_Spatial(conflict_2023_1q)\nconflict_2023_2q_spatial &lt;- as_Spatial(conflict_2023_2q)\nconflict_2023_3q_spatial &lt;- as_Spatial(conflict_2023_3q)\nconflict_2023_4q_spatial &lt;- as_Spatial(conflict_2023_4q)\nconflict_2024_1q_spatial &lt;- as_Spatial(conflict_2024_1q)\nconflict_2024_2q_spatial &lt;- as_Spatial(conflict_2024_2q)\nboundary &lt;- as_Spatial(boundary_data_sf)\n\nI take one of the converted dataframe to verify that it has been converted to spatial class.\n\nconflict_2024_1q_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2054 \nextent      : -207135, 591875.9, 1245380, 3026505  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nvariables   : 31\nnames       : event_id_cnty, event_date, year, time_precision,          disorder_type,                 event_type,                 sub_event_type,                       actor1,                                                                                                                                                                                                                                                                                                                                                                                               assoc_actor_1, inter1,                            actor2,                          assoc_actor_2, inter2, interaction, civilian_targeting, ... \nmin values  :      MMR56030,      19723, 2024,              1,     Political violence,                    Battles, Abduction/forced disappearance,                   9 Stars UG, 3 Star Ayadaw; Ayadaw Myo Nei Kyar Thit Nat Pyauk Kyar Tatphwe: Ayadaw Township Black Leopard Guerrilla Force; DFJ: Drop For Justice; Mine Min Thar Myay Auk Pyauk Kyar Tatphwe: Mine Prince Underground Guerrilla Force; People's Defense Force - Monywa District; People's Defense Force - Myinmu; People's Defense Force - Sagaing District; People's Security Force; Unidentified Anti-Coup Armed Group,      1, ARF: Ayeyarwaddy Revolution Front,                  Aid Workers (Myanmar),      0,          10, Civilian targeting, ... \nmax values  :      MMR66241,      19813, 2024,              3, Strategic developments, Violence against civilians,                Sexual violence, ZRA: Zomi Revolutionary Army,                                                                                                                                                                                                                                                                                                                                                                             Zero Guerrilla Force - Myingyan,      7,     Wolf Guerrilla Local PDF Ye-U, Women (Myanmar); Labor Group (Myanmar),      7,          70, Civilian targeting, ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-spatial-classes-into-sp-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-spatial-classes-into-sp-objects",
    "title": "Take Home Assignment 1",
    "section": "3.4 Convert the Spatial classes into sp objects",
    "text": "3.4 Convert the Spatial classes into sp objects\n\nconflict_2021_1q_sp &lt;- as(conflict_2021_1q_spatial, \"SpatialPoints\")\nconflict_2021_2q_sp &lt;- as(conflict_2021_2q_spatial, \"SpatialPoints\")\nconflict_2021_3q_sp &lt;- as(conflict_2021_3q_spatial, \"SpatialPoints\")\nconflict_2021_4q_sp &lt;- as(conflict_2021_4q_spatial, \"SpatialPoints\")\nconflict_2022_1q_sp &lt;- as(conflict_2022_1q_spatial, \"SpatialPoints\")\nconflict_2022_2q_sp &lt;- as(conflict_2022_2q_spatial, \"SpatialPoints\")\nconflict_2022_3q_sp &lt;- as(conflict_2022_3q_spatial, \"SpatialPoints\")\nconflict_2022_4q_sp &lt;- as(conflict_2022_4q_spatial, \"SpatialPoints\")\nconflict_2023_1q_sp &lt;- as(conflict_2023_1q_spatial, \"SpatialPoints\")\nconflict_2023_2q_sp &lt;- as(conflict_2023_2q_spatial, \"SpatialPoints\")\nconflict_2023_3q_sp &lt;- as(conflict_2023_3q_spatial, \"SpatialPoints\")\nconflict_2023_4q_sp &lt;- as(conflict_2023_4q_spatial, \"SpatialPoints\")\nconflict_2024_1q_sp &lt;- as(conflict_2024_1q_spatial, \"SpatialPoints\")\nconflict_2024_2q_sp &lt;- as(conflict_2024_2q_spatial, \"SpatialPoints\")\nboundary_sp &lt;- as(boundary, \"SpatialPolygons\")\n\nSimilarly to above, I take one of the objects to verify that it has been converted.\n\nconflict_2021_1q_sp\n\nclass       : SpatialPoints \nfeatures    : 637 \nextent      : -203795.3, 591875.9, 1375186, 3026505  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-sp-format-into-ppp-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-the-sp-format-into-ppp-objects",
    "title": "Take Home Assignment 1",
    "section": "3.5 Convert the sp format into ppp objects",
    "text": "3.5 Convert the sp format into ppp objects\n\nconflict_2021_1q_ppp &lt;- as.ppp(st_coordinates(conflict_2021_1q), st_bbox(conflict_2021_1q))\n\nWarning: data contain duplicated points\n\nconflict_2021_2q_ppp&lt;- as.ppp(st_coordinates(conflict_2021_2q), st_bbox(conflict_2021_2q))\n\nWarning: data contain duplicated points\n\nconflict_2021_3q_ppp &lt;- as.ppp(st_coordinates(conflict_2021_3q), st_bbox(conflict_2021_3q))\n\nWarning: data contain duplicated points\n\nconflict_2021_4q_ppp &lt;- as.ppp(st_coordinates(conflict_2021_4q), st_bbox(conflict_2021_4q))\n\nWarning: data contain duplicated points\n\nconflict_2022_1q_ppp &lt;- as.ppp(st_coordinates(conflict_2022_1q), st_bbox(conflict_2022_1q))\n\nWarning: data contain duplicated points\n\nconflict_2022_2q_ppp&lt;- as.ppp(st_coordinates(conflict_2022_2q), st_bbox(conflict_2022_2q))\n\nWarning: data contain duplicated points\n\nconflict_2022_3q_ppp &lt;- as.ppp(st_coordinates(conflict_2022_3q), st_bbox(conflict_2022_3q))\n\nWarning: data contain duplicated points\n\nconflict_2022_4q_ppp &lt;- as.ppp(st_coordinates(conflict_2022_4q), st_bbox(conflict_2022_4q))\n\nWarning: data contain duplicated points\n\nconflict_2023_1q_ppp &lt;- as.ppp(st_coordinates(conflict_2023_1q), st_bbox(conflict_2023_1q))\n\nWarning: data contain duplicated points\n\nconflict_2023_2q_ppp&lt;- as.ppp(st_coordinates(conflict_2023_2q), st_bbox(conflict_2023_2q))\n\nWarning: data contain duplicated points\n\nconflict_2023_3q_ppp &lt;- as.ppp(st_coordinates(conflict_2023_3q), st_bbox(conflict_2023_3q))\n\nWarning: data contain duplicated points\n\nconflict_2023_4q_ppp &lt;- as.ppp(st_coordinates(conflict_2023_4q), st_bbox(conflict_2023_4q))\n\nWarning: data contain duplicated points\n\nconflict_2024_1q_ppp &lt;- as.ppp(st_coordinates(conflict_2024_1q), st_bbox(conflict_2024_1q))\n\nWarning: data contain duplicated points\n\nconflict_2024_2q_ppp&lt;- as.ppp(st_coordinates(conflict_2024_2q), st_bbox(conflict_2024_2q))\n\nWarning: data contain duplicated points\n\n\n\nconflict_2021_1q_ppp\n\nPlanar point pattern: 637 points\nwindow: rectangle = [-203795.3, 591875.9] x [1375186.1, 3026504.9] units\n\n\nAs seen from above, the data contains duplicated points. Therefore, I will remove the duplicated values from each quarter each year using the jittering approach.\n\npar(mfrow=c(1, 4))\nsum(multiplicity(conflict_2021_1q_ppp) &gt; 1)\n\n[1] 493\n\nconflict_2021_1q_ppp_jit &lt;- rjitter(conflict_2021_1q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2021_2q_ppp) &gt; 1)\n\n[1] 1822\n\nconflict_2021_2q_ppp_jit &lt;- rjitter(conflict_2021_2q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2021_3q_ppp) &gt; 1)\n\n[1] 1541\n\nconflict_2021_3q_ppp_jit &lt;- rjitter(conflict_2021_3q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2021_4q_ppp) &gt; 1)\n\n[1] 2041\n\nconflict_2021_4q_ppp_jit &lt;- rjitter(conflict_2021_4q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2022_1q_ppp) &gt; 1)\n\n[1] 1918\n\nconflict_2022_1q_ppp_jit &lt;- rjitter(conflict_2022_1q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2022_2q_ppp) &gt; 1)\n\n[1] 1989\n\nconflict_2022_2q_ppp_jit &lt;- rjitter(conflict_2022_2q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2022_3q_ppp) &gt; 1)\n\n[1] 1918\n\nconflict_2022_3q_ppp_jit &lt;- rjitter(conflict_2022_3q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2022_4q_ppp) &gt; 1)\n\n[1] 1676\n\nconflict_2022_4q_ppp_jit &lt;- rjitter(conflict_2022_4q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2023_1q_ppp) &gt; 1)\n\n[1] 1604\n\nconflict_2023_1q_ppp_jit &lt;- rjitter(conflict_2023_1q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2023_2q_ppp) &gt; 1)\n\n[1] 1353\n\nconflict_2023_2q_ppp_jit &lt;- rjitter(conflict_2023_2q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2023_3q_ppp) &gt; 1)\n\n[1] 1677\n\nconflict_2023_3q_ppp_jit &lt;- rjitter(conflict_2023_3q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2023_4q_ppp) &gt; 1)\n\n[1] 1848\n\nconflict_2023_4q_ppp_jit &lt;- rjitter(conflict_2023_4q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2024_1q_ppp) &gt; 1)\n\n[1] 1489\n\nconflict_2024_1q_ppp_jit &lt;- rjitter(conflict_2024_1q_ppp, retry=TRUE, nsim=1, drop=TRUE)\nsum(multiplicity(conflict_2024_1q_ppp) &gt; 1)\n\n[1] 1489\n\nconflict_2024_2q_ppp_jit &lt;- rjitter(conflict_2024_2q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\nplot(conflict_2021_1q_ppp_jit)\nplot(conflict_2021_2q_ppp_jit)\nplot(conflict_2021_3q_ppp_jit)\nplot(conflict_2021_4q_ppp_jit)\n\n\n\n\n\n\n\nplot(conflict_2022_1q_ppp_jit)\nplot(conflict_2022_2q_ppp_jit)\nplot(conflict_2022_3q_ppp_jit)\nplot(conflict_2022_4q_ppp_jit)\n\n\n\n\n\n\n\nplot(conflict_2023_1q_ppp_jit)\nplot(conflict_2023_2q_ppp_jit)\nplot(conflict_2023_3q_ppp_jit)\nplot(conflict_2023_4q_ppp_jit)\n\n\n\n\n\n\n\nplot(conflict_2024_1q_ppp_jit)\nplot(conflict_2024_2q_ppp_jit)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-objects",
    "title": "Take Home Assignment 1",
    "section": "3.6 Creating owin objects",
    "text": "3.6 Creating owin objects\nTo confine the analysis with Myanmar geographical area, I created the owin object of Myanmar boundary.\n\nboundary_owin &lt;- as.owin(boundary_data_sf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-event-object-and-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-event-object-and-owin-object",
    "title": "Take Home Assignment 1",
    "section": "3.7 Combining point event object and owin object",
    "text": "3.7 Combining point event object and owin object\nIn this section, I extract events that are located in Myanmar. The output of this combines both the point and polygon feature into one ppp class.\n\nowin_2021_1q_ppp = conflict_2021_1q_ppp_jit[boundary_owin]\nowin_2021_2q_ppp = conflict_2021_2q_ppp_jit[boundary_owin]\nowin_2021_3q_ppp = conflict_2021_3q_ppp_jit[boundary_owin]\nowin_2021_4q_ppp = conflict_2021_4q_ppp_jit[boundary_owin]\nowin_2022_1q_ppp = conflict_2022_1q_ppp_jit[boundary_owin]\nowin_2022_2q_ppp = conflict_2022_2q_ppp_jit[boundary_owin]\nowin_2022_3q_ppp = conflict_2022_3q_ppp_jit[boundary_owin]\nowin_2022_4q_ppp = conflict_2022_4q_ppp_jit[boundary_owin]\nowin_2023_1q_ppp = conflict_2023_1q_ppp_jit[boundary_owin]\nowin_2023_2q_ppp = conflict_2023_2q_ppp_jit[boundary_owin]\nowin_2023_3q_ppp = conflict_2023_3q_ppp_jit[boundary_owin]\nowin_2023_4q_ppp = conflict_2023_4q_ppp_jit[boundary_owin]\nowin_2024_1q_ppp = conflict_2024_1q_ppp_jit[boundary_owin]\nowin_2024_2q_ppp = conflict_2024_2q_ppp_jit[boundary_owin]\n\nI then add all the output into a owin_list which I will loop through later on to plot the KDE layers.\n\nowin_list = list(owin_2021_1q_ppp, owin_2021_2q_ppp, owin_2021_3q_ppp, owin_2021_4q_ppp, owin_2022_1q_ppp, owin_2022_2q_ppp, owin_2022_3q_ppp, owin_2022_4q_ppp, owin_2023_1q_ppp, owin_2023_2q_ppp, owin_2023_3q_ppp, owin_2023_4q_ppp, owin_2024_1q_ppp, owin_2024_2q_ppp)\n\n\npar(mfrow=c(1,4))\nfor (i in 1:length(owin_list)) {\n  owin_ppp = rescale.ppp(owin_list[[i]], 1000, \"km\")\n  plot(owin_ppp, main= paste(\"Plot \", i))\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nearest-neighbour-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nearest-neighbour-analysis",
    "title": "Take Home Assignment 1",
    "section": "4.1 Nearest Neighbour Analysis",
    "text": "4.1 Nearest Neighbour Analysis\nTo perform Confirmatory Spatial Point Pattern Analysis, I will be using Nearest Neighbour statistics where I will perform the Clark-Evans test.\nH0: The distribution of conflicts are randomly distributed.\nH1: The distribution of conflicts are not randomly distributed.\nA 95% confident interval will be used.\n\nfor (i in 1:length(owin_list)){\n  results &lt;- clarkevans.test(owin_list[[i]], correction=\"none\", clipregion=\"boundary_owin\", alternative=c('clustered'), nsim=99)\n  print(results)\n}\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.297, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.26532, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.31049, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.30529, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.29201, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.32629, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.30856, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.29264, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.31783, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.31661, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.28822, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.30891, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.30991, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  owin_list[[i]]\nR = 0.34679, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nFrom the test results, with p&lt;0.05, the null hypothesis of conflicts being randomly distributed are rejected."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "title": "Take Home Assignment 1",
    "section": "5.1 Creating owin object",
    "text": "5.1 Creating owin object\nTo confine the analysis within a geographical area of the Region boundaries, I created the owin object.\n\nregion_owin = as.owin(region_sf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "title": "Take Home Assignment 1",
    "section": "5.2 Combining point events object and owin object",
    "text": "5.2 Combining point events object and owin object\nMaking use of the objects that was created earlier after removing the duplicated values, I combine them with the owin object to extract conflicts within the regions in Myanmar. I then added all of the output objects into a list\n\nregion_2021_1q_owin &lt;- conflict_2021_1q_ppp_jit[region_owin]\nregion_2021_2q_owin &lt;- conflict_2021_2q_ppp_jit[region_owin]\nregion_2021_3q_owin &lt;- conflict_2021_3q_ppp_jit[region_owin]\nregion_2021_4q_owin &lt;- conflict_2021_4q_ppp_jit[region_owin]\nregion_2022_1q_owin &lt;- conflict_2022_1q_ppp_jit[region_owin]\nregion_2022_2q_owin &lt;- conflict_2022_2q_ppp_jit[region_owin]\nregion_2022_3q_owin &lt;- conflict_2022_3q_ppp_jit[region_owin]\nregion_2022_4q_owin &lt;- conflict_2022_4q_ppp_jit[region_owin]\nregion_2023_1q_owin &lt;- conflict_2023_1q_ppp_jit[region_owin]\nregion_2023_2q_owin &lt;- conflict_2023_2q_ppp_jit[region_owin]\nregion_2023_3q_owin &lt;- conflict_2023_3q_ppp_jit[region_owin]\nregion_2023_4q_owin &lt;- conflict_2023_4q_ppp_jit[region_owin]\nregion_2024_1q_owin &lt;- conflict_2024_1q_ppp_jit[region_owin]\nregion_2024_2q_owin &lt;- conflict_2024_2q_ppp_jit[region_owin]\n\n\nregion_owin_list = list(region_2021_1q_owin, region_2021_2q_owin, region_2021_3q_owin, region_2021_4q_owin, region_2022_1q_owin, region_2022_2q_owin, region_2022_3q_owin, region_2022_4q_owin, region_2023_1q_owin, region_2023_2q_owin, region_2023_3q_owin, region_2023_4q_owin, region_2024_1q_owin, region_2024_2q_owin)\n\n\npar(mfrow=c(1,4))\nfor (i in 1:length(region_owin_list)) {\n  region_ppp.km = rescale.ppp(region_owin_list[[i]], 1000, \"km\")\n  plot(region_ppp.km, main= paste(\"Region plot \", i))\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-f-function",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-f-function",
    "title": "Take Home Assignment 1",
    "section": "5.3 Region F Function",
    "text": "5.3 Region F Function\nUnfortunately, L and K function are too computationally intensive to run on all points and it has a runtime of O(n^2) which my computer would not be able to support. Therefore, I will be using the F function to see if the conflict points are randomly distributed, clustered or regularly distributed.\n\nfor (i in 1:length(region_owin_list)) {\n  region_ppp.km = rescale.ppp(region_owin_list[[i]], 1000, \"km\")\n  F_region = Fest(region_ppp.km)\n  F_region.csr &lt;- envelope(region_ppp.km, Fest, nsim=99)\n  plot(F_region.csr, main=paste(\"F_region \", i))\n}\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\n\n\n\n\n\nFrom the plot, since the empirical curve falls below the envelope curve, we can conclude that the points are more regularly distributed than randomly distributed in each region."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-conflict-points",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-conflict-points",
    "title": "Take Home Assignment 1",
    "section": "6.0 Visualising the Conflict Points",
    "text": "6.0 Visualising the Conflict Points\n\n6.0.1 Overall plot\n\ntm_shape(boundary_data_sf) + tm_polygons() + tm_shape(conflict_events_sf) + tm_dots()\n\n\n\n\n\n\n\n\n\n\n6.0.2 Geographic distribution of conflicts by quarter\n\ntm_shape(boundary_data_sf) + tm_polygons() + tm_shape(conflict_quarter) + tm_dots(size=0.1) + tm_facets(by=\"quarter_num\", free.coords = FALSE, drop.units = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-spatio-temporal-kde-by-quarter",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-spatio-temporal-kde-by-quarter",
    "title": "Take Home Assignment 1",
    "section": "6.1 Computing Spatio Temporal KDE by Quarter",
    "text": "6.1 Computing Spatio Temporal KDE by Quarter\nUsing the data that was created in 6.0, I create the ppp object. as.ppp() function only need the mark field and the geometry field.\n\nconflict_quarter_ppp &lt;- as.ppp(conflict_quarter)\nconflict_quarter_ppp\n\nMarked planar point pattern: 30400 points\nmarks are numeric, of storage type  'integer'\nwindow: rectangle = [-207135, 640934.5] x [1103500.1, 3042960.3] units\n\n\n\nsummary(conflict_quarter_ppp)\n\nMarked planar point pattern:  30400 points\nAverage intensity 1.848253e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.651  11.000  14.000 \n\nWindow: rectangle = [-207135, 640934.5] x [1103500.1, 3042960.3] units\n                    (848100 x 1939000 units)\nWindow area = 1.6448e+12 square units\n\n\n\n6.1.1 Removing duplicated values\nSeen from the summary above, there are duplicated points. Therefore, I will be removing them using the jittering method since duplicated points will skew density estimates. I will save them in a rds file so that I do not have to remove the duplicated values again.\n\nsum(multiplicity(conflict_quarter_ppp) &gt; 1)\nconflict_quarter_ppp_jit &lt;- rjitter(conflict_quarter_ppp, retry=TRUE, nsim=1, drop=TRUE)\nwrite_rds(conflict_quarter_ppp_jit, \"data/rds/conflict_quarter_ppp_jit.rds\")\n\n\nconflict_quarter_ppp_jit &lt;- read_rds(\"data/rds/conflict_quarter_ppp_jit.rds\")\n\n\nsummary(conflict_quarter_ppp_jit)\n\nMarked planar point pattern:  30400 points\nAverage intensity 1.848253e-08 points per square unit\n\nCoordinates are given to 16 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.651  11.000  14.000 \n\nWindow: rectangle = [-207135, 640934.5] x [1103500.1, 3042960.3] units\n                    (848100 x 1939000 units)\nWindow area = 1.6448e+12 square units\n\n\n\n\n6.1.2 Creating owin object\nTo confine the analysis within a geographical area of the Region boundaries, I created the owin object.\n\nconflict_quarter_owin &lt;- conflict_quarter_ppp_jit[boundary_owin]\nsummary(conflict_quarter_owin)\n\nMarked planar point pattern:  30299 points\nAverage intensity 4.524173e-08 points per square unit\n\nCoordinates are given to 16 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.649  11.000  14.000 \n\nWindow: polygonal boundary\n1345 separate polygons (783 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           4 -2.89739e-02     -4.33e-14\npolygon 2 (hole)           5 -7.39370e-02     -1.10e-13\npolygon 3 (hole)           6 -1.08246e-01     -1.62e-13\npolygon 4 (hole)          13 -3.27066e-01     -4.88e-13\npolygon 5 (hole)           3 -3.55720e-07     -5.31e-19\npolygon 6 (hole)           4 -3.29535e-08     -4.92e-20\npolygon 7 (hole)           4 -2.72345e-07     -4.07e-19\npolygon 8 (hole)           3 -4.10226e-07     -6.13e-19\npolygon 9 (hole)           4 -1.83634e-06     -2.74e-18\npolygon 10 (hole)          3 -1.86294e-06     -2.78e-18\npolygon 11 (hole)          4 -2.01188e-06     -3.00e-18\npolygon 12 (hole)          3 -6.89672e-11     -1.03e-22\npolygon 13 (hole)          4 -1.94084e-06     -2.90e-18\npolygon 14 (hole)          4 -4.15521e-06     -6.20e-18\npolygon 15 (hole)          3 -1.67824e-07     -2.51e-19\npolygon 16 (hole)          4 -5.10103e-07     -7.62e-19\npolygon 17 (hole)          3 -5.71908e-08     -8.54e-20\npolygon 18 (hole)          4 -9.56472e-07     -1.43e-18\npolygon 19 (hole)          3 -1.67010e-06     -2.49e-18\npolygon 20 (hole)          3 -7.14373e-07     -1.07e-18\npolygon 21 (hole)          4 -5.48471e-08     -8.19e-20\npolygon 22 (hole)          4 -9.63973e-07     -1.44e-18\npolygon 23 (hole)          3 -3.04045e-06     -4.54e-18\npolygon 24 (hole)          4 -4.06661e-07     -6.07e-19\npolygon 25 (hole)          3 -1.83329e-13     -2.74e-25\npolygon 26 (hole)          5 -6.85239e-10     -1.02e-21\npolygon 27 (hole)          4 -1.18031e-06     -1.76e-18\npolygon 28 (hole)          4 -9.56264e-11     -1.43e-22\npolygon 29 (hole)          6 -7.03445e-06     -1.05e-17\npolygon 30 (hole)          4 -4.35634e-07     -6.50e-19\npolygon 31 (hole)          4 -3.67731e-07     -5.49e-19\npolygon 32 (hole)         11 -1.82960e-05     -2.73e-17\npolygon 33 (hole)         10 -4.44947e-06     -6.64e-18\npolygon 34 (hole)          4 -5.06848e-07     -7.57e-19\npolygon 35 (hole)         16 -2.17406e-06     -3.25e-18\npolygon 36 (hole)          4 -4.01576e-06     -6.00e-18\npolygon 37 (hole)          4 -3.55001e-07     -5.30e-19\npolygon 38 (hole)          4 -9.82088e-07     -1.47e-18\npolygon 39 (hole)          4 -4.41915e-10     -6.60e-22\npolygon 40 (hole)          3 -4.10023e-09     -6.12e-21\npolygon 41 (hole)          4 -5.97298e-08     -8.92e-20\npolygon 42                26  2.85778e+06      4.27e-06\npolygon 43 (hole)          7 -5.98527e-06     -8.94e-18\npolygon 44 (hole)          5 -1.11940e-06     -1.67e-18\npolygon 45 (hole)          3 -6.94332e-09     -1.04e-20\npolygon 46 (hole)          5 -4.91071e-06     -7.33e-18\npolygon 47 (hole)          4 -3.51438e-07     -5.25e-19\npolygon 48 (hole)          3 -6.99415e-08     -1.04e-19\npolygon 49 (hole)          4 -1.11326e-08     -1.66e-20\npolygon 50 (hole)          3 -6.10517e-07     -9.12e-19\npolygon 51 (hole)          3 -2.24607e-07     -3.35e-19\npolygon 52 (hole)          4 -8.02093e-07     -1.20e-18\npolygon 53 (hole)          3 -9.66907e-08     -1.44e-19\npolygon 54 (hole)          4 -4.37363e-06     -6.53e-18\npolygon 55 (hole)          3 -1.70717e-07     -2.55e-19\npolygon 56 (hole)          4 -3.07590e-06     -4.59e-18\npolygon 57 (hole)          3 -1.99408e-07     -2.98e-19\npolygon 58 (hole)          6 -1.63617e-06     -2.44e-18\npolygon 59 (hole)          3 -3.06785e-07     -4.58e-19\npolygon 60 (hole)          3 -1.56131e-07     -2.33e-19\npolygon 61 (hole)          7 -1.79876e-06     -2.69e-18\npolygon 62 (hole)         11 -1.65937e-05     -2.48e-17\npolygon 63 (hole)          4 -1.42725e-06     -2.13e-18\npolygon 64 (hole)          6 -1.33879e-06     -2.00e-18\npolygon 65 (hole)          3 -3.98058e-07     -5.94e-19\npolygon 66 (hole)          3 -4.46005e-07     -6.66e-19\npolygon 67 (hole)         12 -2.05767e-05     -3.07e-17\npolygon 68 (hole)          3 -2.92851e-07     -4.37e-19\npolygon 69 (hole)          6 -7.37176e-07     -1.10e-18\npolygon 70 (hole)          4 -3.81552e-07     -5.70e-19\npolygon 71 (hole)          4 -1.67713e-06     -2.50e-18\npolygon 72 (hole)          6 -3.03661e-06     -4.53e-18\npolygon 73 (hole)         16 -1.79219e-05     -2.68e-17\npolygon 74 (hole)          4 -1.03552e-06     -1.55e-18\npolygon 75 (hole)          4 -1.01406e-06     -1.51e-18\npolygon 76 (hole)          4 -8.65300e-07     -1.29e-18\npolygon 77 (hole)          3 -5.38141e-07     -8.04e-19\npolygon 78 (hole)          4 -1.48789e-06     -2.22e-18\npolygon 79 (hole)          4 -2.04242e-06     -3.05e-18\npolygon 80 (hole)          3 -1.01252e-06     -1.51e-18\npolygon 81 (hole)          3 -1.59017e-07     -2.37e-19\npolygon 82 (hole)          4 -1.48988e-06     -2.22e-18\npolygon 83 (hole)          3 -1.48101e-07     -2.21e-19\npolygon 84 (hole)          7 -2.30688e-06     -3.44e-18\npolygon 85 (hole)         10 -9.86116e-06     -1.47e-17\npolygon 86 (hole)          6 -3.90621e-06     -5.83e-18\npolygon 87 (hole)          4 -2.01296e-07     -3.01e-19\npolygon 88 (hole)          6 -8.13898e-07     -1.22e-18\npolygon 89 (hole)          3 -4.84979e-08     -7.24e-20\npolygon 90 (hole)          4 -5.46126e-07     -8.15e-19\npolygon 91 (hole)          3 -6.40553e-07     -9.56e-19\npolygon 92 (hole)          4 -2.03670e-07     -3.04e-19\npolygon 93 (hole)          3 -1.16077e-07     -1.73e-19\npolygon 94 (hole)          4 -4.11957e-07     -6.15e-19\npolygon 95 (hole)          3 -7.00399e-08     -1.05e-19\npolygon 96 (hole)          4 -2.23188e-07     -3.33e-19\npolygon 97 (hole)          4 -3.10997e-07     -4.64e-19\npolygon 98 (hole)          6 -5.74412e-06     -8.58e-18\npolygon 99 (hole)          9 -2.19427e-05     -3.28e-17\npolygon 100 (hole)         3 -2.67563e-07     -4.00e-19\npolygon 101 (hole)         4 -1.32715e-06     -1.98e-18\npolygon 102 (hole)         6 -2.60133e-06     -3.88e-18\npolygon 103 (hole)         5 -1.22958e-05     -1.84e-17\npolygon 104 (hole)         3 -1.14982e-09     -1.72e-21\npolygon 105 (hole)         4 -2.43524e-10     -3.64e-22\npolygon 106 (hole)         3 -3.31085e-07     -4.94e-19\npolygon 107 (hole)         4 -8.01372e-07     -1.20e-18\npolygon 108 (hole)         4 -6.70371e-07     -1.00e-18\npolygon 109 (hole)         3 -4.90978e-07     -7.33e-19\npolygon 110 (hole)         4 -2.54297e-06     -3.80e-18\npolygon 111 (hole)         5 -2.38956e-06     -3.57e-18\npolygon 112 (hole)         4 -3.62129e-07     -5.41e-19\npolygon 113 (hole)         5 -9.41057e-07     -1.41e-18\npolygon 114 (hole)         3 -4.44880e-08     -6.64e-20\npolygon 115 (hole)         4 -7.71257e-07     -1.15e-18\npolygon 116 (hole)         6 -2.89370e-06     -4.32e-18\npolygon 117 (hole)         7 -1.57765e-05     -2.36e-17\npolygon 118 (hole)         4 -2.26147e-07     -3.38e-19\npolygon 119 (hole)         4 -1.37331e-06     -2.05e-18\npolygon 120 (hole)         4 -4.36370e-07     -6.52e-19\npolygon 121 (hole)         4 -3.22896e-06     -4.82e-18\npolygon 122 (hole)         4 -4.75997e-07     -7.11e-19\npolygon 123 (hole)         4 -4.38715e-07     -6.55e-19\npolygon 124 (hole)         6 -1.02899e-06     -1.54e-18\npolygon 125 (hole)         4 -1.14855e-06     -1.71e-18\npolygon 126 (hole)         3 -1.02277e-07     -1.53e-19\npolygon 127 (hole)         9 -2.87716e-06     -4.30e-18\npolygon 128 (hole)         3 -3.86621e-07     -5.77e-19\npolygon 129 (hole)         3 -1.94296e-07     -2.90e-19\npolygon 130 (hole)         7 -1.80011e-06     -2.69e-18\npolygon 131 (hole)         4 -5.37691e-07     -8.03e-19\npolygon 132 (hole)         3 -5.77240e-08     -8.62e-20\npolygon 133 (hole)         8 -3.01954e-06     -4.51e-18\npolygon 134 (hole)         6 -6.67140e-06     -9.96e-18\npolygon 135 (hole)         4 -2.66412e-07     -3.98e-19\npolygon 136 (hole)         3 -1.40064e-07     -2.09e-19\npolygon 137 (hole)         4 -3.40782e-07     -5.09e-19\npolygon 138 (hole)         6 -6.46573e-06     -9.65e-18\npolygon 139 (hole)         4 -2.99274e-07     -4.47e-19\npolygon 140 (hole)         3 -5.55465e-10     -8.29e-22\npolygon 141 (hole)         3 -1.77354e-07     -2.65e-19\npolygon 142 (hole)         3 -7.87909e-08     -1.18e-19\npolygon 143 (hole)         3 -1.69698e-07     -2.53e-19\npolygon 144 (hole)         7 -2.48946e-06     -3.72e-18\npolygon 145 (hole)         3 -1.31588e-12     -1.96e-24\npolygon 146 (hole)         4 -3.22413e-07     -4.81e-19\npolygon 147 (hole)         7 -4.93484e-06     -7.37e-18\npolygon 148 (hole)         3 -1.58436e-07     -2.37e-19\npolygon 149 (hole)         4 -3.15509e-08     -4.71e-20\npolygon 150 (hole)         3 -9.84638e-07     -1.47e-18\npolygon 151 (hole)         4 -1.67312e-07     -2.50e-19\npolygon 152 (hole)         3 -1.12101e-07     -1.67e-19\npolygon 153               43  7.32477e+06      1.09e-05\npolygon 154 (hole)         5 -5.48711e-06     -8.19e-18\npolygon 155 (hole)         3 -1.30703e-06     -1.95e-18\npolygon 156 (hole)         3 -3.44039e-07     -5.14e-19\npolygon 157 (hole)         4 -1.67760e-06     -2.50e-18\npolygon 158 (hole)         3 -6.43116e-07     -9.60e-19\npolygon 159 (hole)         3 -3.47614e-08     -5.19e-20\npolygon 160 (hole)         3 -1.66250e-08     -2.48e-20\npolygon 161 (hole)         4 -2.13921e-06     -3.19e-18\npolygon 162 (hole)         4 -4.27151e-07     -6.38e-19\npolygon 163 (hole)         7 -1.19424e-06     -1.78e-18\npolygon 164 (hole)         4 -7.28922e-07     -1.09e-18\npolygon 165 (hole)         4 -2.02465e-06     -3.02e-18\npolygon 166 (hole)         3 -4.21171e-08     -6.29e-20\npolygon 167 (hole)         3 -1.12224e-08     -1.68e-20\npolygon 168              103  1.86991e+07      2.79e-05\npolygon 169 (hole)         3 -2.29459e-07     -3.43e-19\npolygon 170 (hole)         4 -2.38485e-07     -3.56e-19\npolygon 171 (hole)         6 -3.65340e-07     -5.46e-19\npolygon 172 (hole)         4 -1.71122e-07     -2.56e-19\npolygon 173 (hole)         5 -2.87414e-06     -4.29e-18\npolygon 174 (hole)         3 -2.23174e-08     -3.33e-20\npolygon 175 (hole)         3 -2.07226e-08     -3.09e-20\npolygon 176 (hole)         3 -4.70001e-09     -7.02e-21\npolygon 177               37  9.32316e+06      1.39e-05\npolygon 178 (hole)         4 -5.81687e-07     -8.69e-19\npolygon 179                3  0.00000e+00      0.00e+00\npolygon 180 (hole)         8 -3.12973e-06     -4.67e-18\npolygon 181 (hole)         4 -2.57791e-08     -3.85e-20\npolygon 182 (hole)         3 -2.00116e-06     -2.99e-18\npolygon 183 (hole)         4 -1.16159e-06     -1.73e-18\npolygon 184 (hole)         3 -1.24415e-09     -1.86e-21\npolygon 185 (hole)         4 -7.76199e-07     -1.16e-18\npolygon 186 (hole)         4 -8.04350e-07     -1.20e-18\npolygon 187              371  2.43869e+08      3.64e-04\npolygon 188              297  2.84905e+08      4.25e-04\npolygon 189 (hole)         3 -3.45320e-06     -5.16e-18\npolygon 190 (hole)         3 -9.76936e-08     -1.46e-19\npolygon 191 (hole)         4 -3.63549e-07     -5.43e-19\npolygon 192 (hole)         4 -3.27706e-07     -4.89e-19\npolygon 193               33  1.68222e+07      2.51e-05\npolygon 194               33  4.47665e+05      6.68e-07\npolygon 195               19  1.34593e+05      2.01e-07\npolygon 196               39  1.36327e+06      2.04e-06\npolygon 197              137  1.55547e+08      2.32e-04\npolygon 198 (hole)         3 -4.67770e-09     -6.98e-21\npolygon 199 (hole)         3 -8.08618e-08     -1.21e-19\npolygon 200 (hole)         4 -3.87011e-06     -5.78e-18\npolygon 201               36  8.76479e+06      1.31e-05\npolygon 202 (hole)         4 -4.56275e-07     -6.81e-19\npolygon 203               79  3.08116e+07      4.60e-05\npolygon 204 (hole)         4 -5.65074e-07     -8.44e-19\npolygon 205              388  2.25271e+08      3.36e-04\npolygon 206 (hole)         4 -3.42368e-06     -5.11e-18\npolygon 207 (hole)         3 -7.83497e-07     -1.17e-18\npolygon 208 (hole)         3 -4.76203e-09     -7.11e-21\npolygon 209              316  7.78512e+07      1.16e-04\npolygon 210               13  1.09564e+05      1.64e-07\npolygon 211               18  3.49727e+05      5.22e-07\npolygon 212               31  1.23017e+06      1.84e-06\npolygon 213               16  6.55537e+05      9.79e-07\npolygon 214               24  8.49487e+05      1.27e-06\npolygon 215 (hole)         5 -3.46963e-07     -5.18e-19\npolygon 216 (hole)         4 -6.69787e-07     -1.00e-18\npolygon 217 (hole)         4 -1.41603e-07     -2.11e-19\npolygon 218               30  2.54436e+06      3.80e-06\npolygon 219              336  4.15806e+07      6.21e-05\npolygon 220 (hole)         6 -2.04487e-06     -3.05e-18\npolygon 221 (hole)         4 -2.93932e-07     -4.39e-19\npolygon 222 (hole)         3 -3.03547e-08     -4.53e-20\npolygon 223              330  1.69190e+08      2.53e-04\npolygon 224               47  1.08035e+07      1.61e-05\npolygon 225               39  4.94369e+06      7.38e-06\npolygon 226 (hole)         4 -9.31715e-07     -1.39e-18\npolygon 227 (hole)         3 -1.61548e-12     -2.41e-24\npolygon 228 (hole)         3 -1.07143e-07     -1.60e-19\npolygon 229 (hole)         4 -6.10340e-07     -9.11e-19\npolygon 230               23  2.72438e+06      4.07e-06\npolygon 231               33  5.70263e+06      8.52e-06\npolygon 232 (hole)         4 -1.12608e-07     -1.68e-19\npolygon 233 (hole)         4 -8.85831e-08     -1.32e-19\npolygon 234               90  4.20329e+07      6.28e-05\npolygon 235               28  1.35341e+06      2.02e-06\npolygon 236              225  1.08816e+08      1.62e-04\npolygon 237               33  9.16670e+06      1.37e-05\npolygon 238 (hole)         3 -9.13049e-09     -1.36e-20\npolygon 239 (hole)         4 -4.56911e-07     -6.82e-19\npolygon 240              192  7.02655e+07      1.05e-04\npolygon 241               49  1.49245e+07      2.23e-05\npolygon 242               98  1.79076e+07      2.67e-05\npolygon 243 (hole)         4 -2.18459e-09     -3.26e-21\npolygon 244 (hole)         4 -1.36504e-06     -2.04e-18\npolygon 245 (hole)         5 -2.42563e-06     -3.62e-18\npolygon 246                6  6.37552e+05      9.52e-07\npolygon 247 (hole)         3 -2.79397e-08     -4.17e-20\npolygon 248               49  1.01233e+07      1.51e-05\npolygon 249 (hole)         3 -1.17677e-06     -1.76e-18\npolygon 250              141  3.43053e+07      5.12e-05\npolygon 251 (hole)         6 -3.18516e-06     -4.76e-18\npolygon 252              195  3.24345e+07      4.84e-05\npolygon 253               51  3.38313e+06      5.05e-06\npolygon 254               34  2.01400e+06      3.01e-06\npolygon 255 (hole)         4 -3.14136e-07     -4.69e-19\npolygon 256 (hole)         3 -4.27796e-07     -6.39e-19\npolygon 257               13  2.50435e+05      3.74e-07\npolygon 258                9  9.04824e+04      1.35e-07\npolygon 259               34  4.61794e+06      6.90e-06\npolygon 260               17  4.58200e+05      6.84e-07\npolygon 261               15  2.74776e+05      4.10e-07\npolygon 262 (hole)         4 -2.17893e-06     -3.25e-18\npolygon 263 (hole)         5 -7.02326e-06     -1.05e-17\npolygon 264               21  5.34978e+05      7.99e-07\npolygon 265               19  4.55347e+05      6.80e-07\npolygon 266 (hole)         6 -4.09510e-06     -6.11e-18\npolygon 267               71  3.42557e+06      5.11e-06\npolygon 268 (hole)         3 -7.38399e-08     -1.10e-19\npolygon 269               24  1.32420e+06      1.98e-06\npolygon 270               15  3.26247e+05      4.87e-07\npolygon 271               39  8.65790e+05      1.29e-06\npolygon 272               43  1.41627e+06      2.11e-06\npolygon 273               24  7.52068e+05      1.12e-06\npolygon 274               96  1.32101e+07      1.97e-05\npolygon 275               38  1.18003e+06      1.76e-06\npolygon 276              429  5.99087e+08      8.95e-04\npolygon 277               13  1.74105e+05      2.60e-07\npolygon 278               19  2.52336e+05      3.77e-07\npolygon 279               16  3.11495e+05      4.65e-07\npolygon 280               11  9.11047e+04      1.36e-07\npolygon 281               12  2.13470e+05      3.19e-07\npolygon 282               17  5.82663e+05      8.70e-07\npolygon 283 (hole)         4 -1.89536e-06     -2.83e-18\npolygon 284               56  2.60440e+07      3.89e-05\npolygon 285              107  4.91389e+06      7.34e-06\npolygon 286 (hole)         7 -2.04270e-06     -3.05e-18\npolygon 287               51  2.79076e+06      4.17e-06\npolygon 288 (hole)         5 -1.27010e-06     -1.90e-18\npolygon 289               89  1.61156e+07      2.41e-05\npolygon 290 (hole)         4 -2.08446e-08     -3.11e-20\npolygon 291 (hole)         3 -1.60149e-08     -2.39e-20\npolygon 292               28  1.30499e+06      1.95e-06\npolygon 293 (hole)         4 -5.63014e-07     -8.41e-19\npolygon 294               11  1.27616e+05      1.91e-07\npolygon 295               34  2.54199e+06      3.80e-06\npolygon 296               27  1.72476e+06      2.58e-06\npolygon 297 (hole)         3 -2.72458e-09     -4.07e-21\npolygon 298               37  2.01882e+06      3.01e-06\npolygon 299 (hole)         4 -5.70504e-07     -8.52e-19\npolygon 300               23  1.65571e+06      2.47e-06\npolygon 301               33  3.05816e+06      4.57e-06\npolygon 302 (hole)         4 -8.37974e-07     -1.25e-18\npolygon 303 (hole)         4 -2.08298e-07     -3.11e-19\npolygon 304 (hole)         4 -2.05163e-07     -3.06e-19\npolygon 305               14  3.23153e+05      4.83e-07\npolygon 306               91  1.51209e+07      2.26e-05\npolygon 307               12  2.42901e+05      3.63e-07\npolygon 308 (hole)         3 -7.12933e-09     -1.06e-20\npolygon 309 (hole)         4 -2.12296e-09     -3.17e-21\npolygon 310 (hole)         5 -6.51128e-07     -9.72e-19\npolygon 311               11  1.37889e+05      2.06e-07\npolygon 312 (hole)         4 -7.83312e-07     -1.17e-18\npolygon 313 (hole)         4 -2.15527e-07     -3.22e-19\npolygon 314 (hole)         3 -2.24169e-08     -3.35e-20\npolygon 315               58  2.29751e+07      3.43e-05\npolygon 316               48  5.10265e+06      7.62e-06\npolygon 317               22  1.30706e+06      1.95e-06\npolygon 318 (hole)         4 -2.64848e-06     -3.95e-18\npolygon 319               15  3.49480e+05      5.22e-07\npolygon 320 (hole)        15 -2.06284e-05     -3.08e-17\npolygon 321               17  1.57570e+06      2.35e-06\npolygon 322 (hole)         4 -4.42575e-07     -6.61e-19\npolygon 323 (hole)         4 -5.27325e-06     -7.87e-18\npolygon 324 (hole)         6 -6.26349e-06     -9.35e-18\npolygon 325 (hole)         4 -6.27134e-06     -9.36e-18\npolygon 326 (hole)         4 -3.59342e-06     -5.37e-18\npolygon 327 (hole)         4 -5.02133e-08     -7.50e-20\npolygon 328 (hole)         3 -7.53308e-09     -1.12e-20\npolygon 329 (hole)         4 -2.64937e-07     -3.96e-19\npolygon 330 (hole)        10 -5.93010e-06     -8.85e-18\npolygon 331 (hole)         3 -3.39743e-06     -5.07e-18\npolygon 332 (hole)         4 -3.71039e-07     -5.54e-19\npolygon 333 (hole)        21 -6.24740e-06     -9.33e-18\npolygon 334 (hole)         3 -6.29672e-07     -9.40e-19\npolygon 335 (hole)         4 -1.64658e-07     -2.46e-19\npolygon 336 (hole)         3 -2.26368e-10     -3.38e-22\npolygon 337 (hole)         3 -7.64382e-10     -1.14e-21\npolygon 338 (hole)         3 -3.82634e-08     -5.71e-20\npolygon 339               34  3.68725e+06      5.51e-06\npolygon 340 (hole)         3 -2.04657e-07     -3.06e-19\npolygon 341 (hole)         4 -4.60327e-07     -6.87e-19\npolygon 342 (hole)         3 -3.46305e-07     -5.17e-19\npolygon 343 (hole)         3 -2.24522e-07     -3.35e-19\npolygon 344 (hole)         4 -3.10471e-07     -4.64e-19\npolygon 345 (hole)         3 -1.29881e-08     -1.94e-20\npolygon 346               34  5.21904e+06      7.79e-06\npolygon 347 (hole)         4 -8.16830e-07     -1.22e-18\npolygon 348 (hole)         4 -5.25346e-12     -7.84e-24\npolygon 349 (hole)         4 -1.34474e-07     -2.01e-19\npolygon 350 (hole)         4 -7.58535e-07     -1.13e-18\npolygon 351               24  5.42734e+06      8.10e-06\npolygon 352 (hole)         4 -3.70207e-07     -5.53e-19\npolygon 353 (hole)         4 -4.44568e-07     -6.64e-19\npolygon 354 (hole)         4 -1.37458e-06     -2.05e-18\npolygon 355 (hole)         4 -3.82934e-06     -5.72e-18\npolygon 356 (hole)         3 -1.56625e-06     -2.34e-18\npolygon 357 (hole)         4 -4.24394e-08     -6.34e-20\npolygon 358 (hole)         4 -7.88438e-08     -1.18e-19\npolygon 359 (hole)         5 -6.25364e-07     -9.34e-19\npolygon 360 (hole)         4 -4.68732e-09     -7.00e-21\npolygon 361 (hole)         3 -3.01326e-07     -4.50e-19\npolygon 362 (hole)         3 -2.73646e-08     -4.09e-20\npolygon 363 (hole)         4 -5.74129e-07     -8.57e-19\npolygon 364              422  4.66497e+08      6.97e-04\npolygon 365 (hole)         5 -1.31979e-06     -1.97e-18\npolygon 366 (hole)         3 -5.34019e-10     -7.97e-22\npolygon 367 (hole)         3 -1.99125e-09     -2.97e-21\npolygon 368 (hole)         3 -1.39870e-07     -2.09e-19\npolygon 369 (hole)         3 -1.07121e-06     -1.60e-18\npolygon 370 (hole)         3 -4.31047e-07     -6.44e-19\npolygon 371 (hole)         4 -3.49431e-07     -5.22e-19\npolygon 372              142  2.98767e+07      4.46e-05\npolygon 373 (hole)         3 -2.44926e-08     -3.66e-20\npolygon 374 (hole)         3 -3.19009e-08     -4.76e-20\npolygon 375 (hole)         3 -2.59781e-08     -3.88e-20\npolygon 376 (hole)         3 -1.22448e-07     -1.83e-19\npolygon 377              132  2.18707e+07      3.27e-05\npolygon 378 (hole)         3 -3.60761e-07     -5.39e-19\npolygon 379 (hole)         3 -2.37207e-08     -3.54e-20\npolygon 380 (hole)         4 -8.71149e-07     -1.30e-18\npolygon 381 (hole)         4 -1.81852e-06     -2.72e-18\npolygon 382 (hole)         3 -9.47568e-09     -1.41e-20\npolygon 383 (hole)         4 -1.05268e-06     -1.57e-18\npolygon 384 (hole)         9 -8.92711e-06     -1.33e-17\npolygon 385 (hole)         4 -1.59532e-06     -2.38e-18\npolygon 386 (hole)         5 -8.69411e-07     -1.30e-18\npolygon 387 (hole)         6 -5.29194e-06     -7.90e-18\npolygon 388 (hole)        12 -7.93669e-06     -1.19e-17\npolygon 389 (hole)         3 -3.65933e-08     -5.46e-20\npolygon 390               19  5.88230e+05      8.78e-07\npolygon 391 (hole)         3 -6.88046e-08     -1.03e-19\npolygon 392               22  1.77611e+06      2.65e-06\npolygon 393 (hole)         4 -6.42929e-04     -9.60e-16\npolygon 394               40  4.09952e+06      6.12e-06\npolygon 395 (hole)         3 -2.52078e-03     -3.76e-15\npolygon 396 (hole)         3 -1.14757e-07     -1.71e-19\npolygon 397               28  1.47685e+06      2.21e-06\npolygon 398 (hole)         4 -3.14458e-08     -4.70e-20\npolygon 399 (hole)         4 -8.02831e-08     -1.20e-19\npolygon 400 (hole)         8 -8.93463e-02     -1.33e-13\npolygon 401 (hole)         3 -6.85896e-11     -1.02e-22\npolygon 402 (hole)         4 -1.16516e-07     -1.74e-19\npolygon 403               67  9.99685e+06      1.49e-05\npolygon 404 (hole)         6 -3.37319e-06     -5.04e-18\npolygon 405 (hole)         7 -9.81865e-07     -1.47e-18\npolygon 406 (hole)         3 -6.88049e-10     -1.03e-21\npolygon 407 (hole)         3 -3.18016e-08     -4.75e-20\npolygon 408 (hole)         8 -6.36344e-02     -9.50e-14\npolygon 409 (hole)         6 -7.57977e-02     -1.13e-13\npolygon 410 (hole)         4 -5.06714e-07     -7.57e-19\npolygon 411 (hole)         7 -5.87793e-06     -8.78e-18\npolygon 412 (hole)        10 -2.86267e-06     -4.27e-18\npolygon 413 (hole)         7 -1.06387e-06     -1.59e-18\npolygon 414 (hole)         3 -4.31917e-06     -6.45e-18\npolygon 415 (hole)         8 -1.08149e-06     -1.61e-18\npolygon 416 (hole)         3 -1.00264e-08     -1.50e-20\npolygon 417 (hole)        10 -2.61217e-06     -3.90e-18\npolygon 418 (hole)         6 -1.06953e-06     -1.60e-18\npolygon 419 (hole)         4 -1.90065e-07     -2.84e-19\npolygon 420 (hole)         4 -2.24224e-02     -3.35e-14\npolygon 421 (hole)         6 -1.09700e-07     -1.64e-19\npolygon 422 (hole)        11 -2.01202e-06     -3.00e-18\npolygon 423 (hole)         5 -9.35663e-02     -1.40e-13\npolygon 424 (hole)         4 -5.24917e-08     -7.84e-20\npolygon 425 (hole)         7 -1.21076e-06     -1.81e-18\npolygon 426 (hole)        13 -1.39251e-01     -2.08e-13\npolygon 427 (hole)         7 -1.46533e-01     -2.19e-13\npolygon 428 (hole)         6 -7.59071e-02     -1.13e-13\npolygon 429 (hole)         7 -5.15914e-03     -7.70e-15\npolygon 430 (hole)        10 -4.09465e-02     -6.11e-14\npolygon 431 (hole)        21 -1.86624e-01     -2.79e-13\npolygon 432 (hole)         3 -1.69684e-02     -2.53e-14\npolygon 433 (hole)         8 -4.08363e-02     -6.10e-14\npolygon 434 (hole)         3 -1.73631e-02     -2.59e-14\npolygon 435 (hole)         5 -1.41820e-02     -2.12e-14\npolygon 436 (hole)        10 -6.15227e-02     -9.19e-14\npolygon 437 (hole)         8 -2.90782e-02     -4.34e-14\npolygon 438 (hole)         8 -6.15579e-02     -9.19e-14\npolygon 439 (hole)         4 -7.46409e-04     -1.11e-15\npolygon 440 (hole)         4 -1.05431e-02     -1.57e-14\npolygon 441 (hole)         7 -1.72082e-06     -2.57e-18\npolygon 442 (hole)         7 -2.49218e-06     -3.72e-18\npolygon 443 (hole)         4 -8.25150e-03     -1.23e-14\npolygon 444 (hole)         3 -2.15876e-07     -3.22e-19\npolygon 445 (hole)         6 -7.79825e-07     -1.16e-18\npolygon 446 (hole)         3 -2.59990e-02     -3.88e-14\npolygon 447 (hole)         4 -1.96870e-02     -2.94e-14\npolygon 448 (hole)         3 -9.09758e-03     -1.36e-14\npolygon 449 (hole)         3 -4.01475e-05     -5.99e-17\npolygon 450 (hole)         9 -2.41806e-02     -3.61e-14\npolygon 451 (hole)         4 -4.08101e-08     -6.09e-20\npolygon 452                3  0.00000e+00      0.00e+00\npolygon 453 (hole)         7 -5.73306e-02     -8.56e-14\npolygon 454 (hole)         4 -4.26735e-02     -6.37e-14\npolygon 455 (hole)         3 -2.21993e-08     -3.31e-20\npolygon 456 (hole)         5 -8.18708e-07     -1.22e-18\npolygon 457 (hole)         7 -1.69748e-02     -2.53e-14\npolygon 458 (hole)         3 -4.66468e-08     -6.97e-20\npolygon 459 (hole)         3 -1.05617e-02     -1.58e-14\npolygon 460 (hole)         4 -1.05444e-06     -1.57e-18\npolygon 461 (hole)         4 -1.34632e-07     -2.01e-19\npolygon 462 (hole)         4 -1.39750e-08     -2.09e-20\npolygon 463 (hole)         4 -3.58077e-08     -5.35e-20\npolygon 464 (hole)         5 -4.57466e-06     -6.83e-18\npolygon 465               25  4.82266e+05      7.20e-07\npolygon 466 (hole)         4 -2.04127e-07     -3.05e-19\npolygon 467 (hole)         6 -3.72405e-02     -5.56e-14\npolygon 468 (hole)         3 -3.37970e-07     -5.05e-19\npolygon 469 (hole)         7 -3.08334e-02     -4.60e-14\npolygon 470 (hole)         4 -5.73988e-08     -8.57e-20\npolygon 471 (hole)         4 -6.69856e-03     -1.00e-14\npolygon 472 (hole)         4 -1.15937e-02     -1.73e-14\npolygon 473 (hole)         4 -6.51952e-07     -9.73e-19\npolygon 474 (hole)         4 -3.11046e-03     -4.64e-15\npolygon 475 (hole)        12 -1.45689e-01     -2.18e-13\npolygon 476 (hole)         6 -6.22064e-07     -9.29e-19\npolygon 477 (hole)         4 -1.41734e-07     -2.12e-19\npolygon 478 (hole)         3 -6.12975e-07     -9.15e-19\npolygon 479 (hole)         8 -6.15169e-06     -9.19e-18\npolygon 480 (hole)         4 -5.64800e-02     -8.43e-14\npolygon 481 (hole)         3 -1.11189e-02     -1.66e-14\npolygon 482 (hole)         3 -1.66641e-07     -2.49e-19\npolygon 483 (hole)         4 -2.07175e-09     -3.09e-21\npolygon 484 (hole)         3 -4.92109e-08     -7.35e-20\npolygon 485 (hole)         4 -2.60006e-02     -3.88e-14\npolygon 486 (hole)         3 -1.01395e-11     -1.51e-23\npolygon 487 (hole)         4 -2.21624e-10     -3.31e-22\npolygon 488 (hole)         4 -1.05862e-07     -1.58e-19\npolygon 489 (hole)         3 -1.17217e-11     -1.75e-23\npolygon 490 (hole)        28 -1.79082e-01     -2.67e-13\npolygon 491 (hole)         4 -1.58212e-04     -2.36e-16\npolygon 492 (hole)         4 -3.64666e-07     -5.45e-19\npolygon 493 (hole)         4 -9.07721e-06     -1.36e-17\npolygon 494 (hole)         4 -6.73612e-03     -1.01e-14\npolygon 495               16  4.14093e+05      6.18e-07\npolygon 496 (hole)         4 -5.09041e-07     -7.60e-19\npolygon 497 (hole)         4 -1.30783e-07     -1.95e-19\npolygon 498 (hole)         4 -2.14069e-09     -3.20e-21\npolygon 499 (hole)         4 -1.82795e-08     -2.73e-20\npolygon 500 (hole)         4 -5.36782e-03     -8.02e-15\npolygon 501 (hole)         6 -1.51450e-02     -2.26e-14\npolygon 502 (hole)         4 -4.38078e-03     -6.54e-15\npolygon 503 (hole)         4 -1.36409e-02     -2.04e-14\npolygon 504 (hole)         4 -3.84271e-02     -5.74e-14\npolygon 505 (hole)         3 -7.56650e-03     -1.13e-14\npolygon 506 (hole)         3 -3.20234e-07     -4.78e-19\npolygon 507 (hole)         4 -8.04110e-03     -1.20e-14\npolygon 508 (hole)         6 -2.53481e-02     -3.78e-14\npolygon 509 (hole)         3 -4.18749e-08     -6.25e-20\npolygon 510 (hole)         4 -1.15603e-02     -1.73e-14\npolygon 511 (hole)         3 -2.16578e-03     -3.23e-15\npolygon 512 (hole)         4 -3.80479e-07     -5.68e-19\npolygon 513 (hole)         3 -4.76364e-08     -7.11e-20\npolygon 514 (hole)         4 -4.65116e-07     -6.94e-19\npolygon 515 (hole)         3 -1.86664e-07     -2.79e-19\npolygon 516 (hole)         3 -2.87542e-03     -4.29e-15\npolygon 517 (hole)         5 -2.50764e-08     -3.74e-20\npolygon 518 (hole)         6 -7.90541e-07     -1.18e-18\npolygon 519 (hole)         4 -5.42478e-02     -8.10e-14\npolygon 520 (hole)         3 -4.75090e-03     -7.09e-15\npolygon 521 (hole)         4 -3.45047e-02     -5.15e-14\npolygon 522 (hole)         6 -7.20472e-03     -1.08e-14\npolygon 523 (hole)         3 -3.04805e-12     -4.55e-24\npolygon 524 (hole)         4 -8.16292e-08     -1.22e-19\npolygon 525 (hole)         6 -7.71308e-07     -1.15e-18\npolygon 526 (hole)         4 -2.01300e-02     -3.01e-14\npolygon 527 (hole)         4 -1.06474e-07     -1.59e-19\npolygon 528 (hole)         6 -1.34176e-06     -2.00e-18\npolygon 529 (hole)         6 -1.08555e-07     -1.62e-19\npolygon 530 (hole)         3 -1.22081e-07     -1.82e-19\npolygon 531 (hole)         7 -1.14683e-06     -1.71e-18\npolygon 532 (hole)         3 -4.64709e-07     -6.94e-19\npolygon 533 (hole)         4 -7.86243e-07     -1.17e-18\npolygon 534 (hole)         9 -7.99880e-02     -1.19e-13\npolygon 535 (hole)         3 -1.61996e-07     -2.42e-19\npolygon 536 (hole)         6 -1.02196e-07     -1.53e-19\npolygon 537 (hole)         4 -1.30938e-03     -1.96e-15\npolygon 538 (hole)         4 -1.42378e-11     -2.13e-23\npolygon 539 (hole)         9 -6.93637e-06     -1.04e-17\npolygon 540 (hole)         9 -1.92423e-02     -2.87e-14\npolygon 541 (hole)         4 -1.00754e-06     -1.50e-18\npolygon 542 (hole)         3 -2.44523e-07     -3.65e-19\npolygon 543 (hole)         4 -2.73889e-02     -4.09e-14\npolygon 544 (hole)         4 -1.09638e-07     -1.64e-19\npolygon 545 (hole)         6 -2.07150e-06     -3.09e-18\npolygon 546 (hole)         5 -3.09883e-07     -4.63e-19\npolygon 547 (hole)         3 -1.54562e-06     -2.31e-18\npolygon 548 (hole)         3 -1.15109e-02     -1.72e-14\npolygon 549 (hole)         4 -3.57695e-08     -5.34e-20\npolygon 550 (hole)         5 -1.82216e-06     -2.72e-18\npolygon 551 (hole)         4 -8.77810e-02     -1.31e-13\npolygon 552 (hole)         7 -2.49873e-06     -3.73e-18\npolygon 553 (hole)         3 -7.17116e-07     -1.07e-18\npolygon 554               26  3.03928e+06      4.54e-06\npolygon 555 (hole)         6 -8.99139e-02     -1.34e-13\npolygon 556 (hole)         6 -1.07810e-06     -1.61e-18\npolygon 557 (hole)         4 -4.49324e-07     -6.71e-19\npolygon 558 (hole)         4 -1.63537e-06     -2.44e-18\npolygon 559 (hole)         4 -1.66983e-08     -2.49e-20\npolygon 560 (hole)         3 -1.20354e-07     -1.80e-19\npolygon 561 (hole)         6 -6.18153e-06     -9.23e-18\npolygon 562 (hole)         4 -3.03787e-07     -4.54e-19\npolygon 563 (hole)         6 -1.02159e-06     -1.53e-18\npolygon 564 (hole)         8 -2.04339e-06     -3.05e-18\npolygon 565 (hole)         7 -1.69870e-01     -2.54e-13\npolygon 566 (hole)         8 -7.11283e-06     -1.06e-17\npolygon 567 (hole)        14 -3.82802e-06     -5.72e-18\npolygon 568 (hole)         4 -2.35641e-06     -3.52e-18\npolygon 569 (hole)         3 -1.51419e-07     -2.26e-19\npolygon 570 (hole)        11 -1.85737e-01     -2.77e-13\npolygon 571 (hole)         6 -2.18529e-06     -3.26e-18\npolygon 572 (hole)        11 -4.86346e-06     -7.26e-18\npolygon 573 (hole)         4 -3.83301e-07     -5.72e-19\npolygon 574 (hole)        32 -8.16597e-01     -1.22e-12\npolygon 575 (hole)         3 -2.74036e-07     -4.09e-19\npolygon 576 (hole)         4 -1.25077e-09     -1.87e-21\npolygon 577 (hole)         3 -3.99854e-08     -5.97e-20\npolygon 578 (hole)         4 -2.67722e-13     -4.00e-25\npolygon 579 (hole)         4 -8.73792e-08     -1.30e-19\npolygon 580 (hole)         3 -7.28025e-12     -1.09e-23\npolygon 581 (hole)         4 -1.73159e-07     -2.59e-19\npolygon 582 (hole)         3 -1.77999e-08     -2.66e-20\npolygon 583 (hole)         4 -2.22329e-08     -3.32e-20\npolygon 584 (hole)         3 -1.57852e-07     -2.36e-19\npolygon 585 (hole)         3 -2.88032e-09     -4.30e-21\npolygon 586 (hole)         3 -1.07568e-06     -1.61e-18\npolygon 587 (hole)         7 -6.59191e-02     -9.84e-14\npolygon 588 (hole)         4 -1.58960e-07     -2.37e-19\npolygon 589 (hole)         4 -2.73739e-07     -4.09e-19\npolygon 590 (hole)         3 -1.48932e-02     -2.22e-14\npolygon 591 (hole)        13 -3.56626e-01     -5.33e-13\npolygon 592 (hole)         4 -3.50738e-08     -5.24e-20\npolygon 593 (hole)         6 -3.99329e-06     -5.96e-18\npolygon 594 (hole)         8 -4.35683e-06     -6.51e-18\npolygon 595 (hole)         3 -1.64307e-06     -2.45e-18\npolygon 596 (hole)         3 -2.09234e-07     -3.12e-19\npolygon 597 (hole)         4 -1.29603e-07     -1.94e-19\npolygon 598               14  1.53563e+05      2.29e-07\npolygon 599 (hole)         6 -6.03221e-06     -9.01e-18\npolygon 600 (hole)        15 -2.31620e-01     -3.46e-13\npolygon 601 (hole)         4 -1.38723e-08     -2.07e-20\npolygon 602 (hole)         5 -1.30592e-06     -1.95e-18\npolygon 603 (hole)         4 -4.22857e-07     -6.31e-19\npolygon 604 (hole)         3 -4.27362e-08     -6.38e-20\npolygon 605 (hole)         4 -9.72694e-08     -1.45e-19\npolygon 606 (hole)         7 -1.59277e-06     -2.38e-18\npolygon 607 (hole)         4 -3.30055e-07     -4.93e-19\npolygon 608 (hole)         3 -2.27202e-11     -3.39e-23\npolygon 609 (hole)         6 -1.63424e-06     -2.44e-18\npolygon 610 (hole)         7 -5.32246e-06     -7.95e-18\npolygon 611 (hole)         7 -3.46670e-02     -5.18e-14\npolygon 612 (hole)         6 -1.14747e-06     -1.71e-18\npolygon 613 (hole)         3 -6.96187e-12     -1.04e-23\npolygon 614 (hole)         5 -1.22481e-06     -1.83e-18\npolygon 615 (hole)         7 -6.56975e-06     -9.81e-18\npolygon 616 (hole)        11 -3.75831e-06     -5.61e-18\npolygon 617 (hole)         9 -1.47233e-06     -2.20e-18\npolygon 618 (hole)         9 -4.22533e-06     -6.31e-18\npolygon 619 (hole)        13 -1.40633e-02     -2.10e-14\npolygon 620 (hole)        11 -2.28017e-06     -3.40e-18\npolygon 621 (hole)         4 -4.48255e-07     -6.69e-19\npolygon 622 (hole)         3 -9.77849e-09     -1.46e-20\npolygon 623 (hole)         4 -4.47668e-07     -6.68e-19\npolygon 624 (hole)         6 -2.76240e-02     -4.12e-14\npolygon 625 (hole)         3 -3.74154e-02     -5.59e-14\npolygon 626 (hole)         3 -1.16808e-02     -1.74e-14\npolygon 627 (hole)        10 -4.10705e-03     -6.13e-15\npolygon 628 (hole)        10 -1.69077e-06     -2.52e-18\npolygon 629 (hole)         3 -2.87094e-08     -4.29e-20\npolygon 630 (hole)         3 -3.26602e-08     -4.88e-20\npolygon 631 (hole)         3 -1.55568e-07     -2.32e-19\npolygon 632 (hole)         4 -9.39130e-07     -1.40e-18\npolygon 633 (hole)         4 -7.90017e-02     -1.18e-13\npolygon 634 (hole)         3 -1.07902e-03     -1.61e-15\npolygon 635 (hole)         3 -8.74114e-04     -1.31e-15\npolygon 636 (hole)         4 -4.24113e-08     -6.33e-20\npolygon 637 (hole)         5 -1.41525e-06     -2.11e-18\npolygon 638 (hole)         4 -1.16350e-06     -1.74e-18\npolygon 639 (hole)         3 -6.97838e-08     -1.04e-19\npolygon 640 (hole)        10 -5.59537e-02     -8.35e-14\npolygon 641 (hole)         4 -1.48865e-08     -2.22e-20\npolygon 642 (hole)         6 -6.68506e-07     -9.98e-19\npolygon 643 (hole)         3 -2.30992e-08     -3.45e-20\npolygon 644 (hole)         5 -4.30820e-07     -6.43e-19\npolygon 645 (hole)         4 -4.50814e-08     -6.73e-20\npolygon 646 (hole)         5 -1.83919e-07     -2.75e-19\npolygon 647 (hole)         8 -9.78938e-07     -1.46e-18\npolygon 648               19  5.08538e+05      7.59e-07\npolygon 649 (hole)         6 -1.54713e-06     -2.31e-18\npolygon 650 (hole)         4 -1.45573e-02     -2.17e-14\npolygon 651               16  1.80565e+05      2.70e-07\npolygon 652               26  9.75091e+05      1.46e-06\npolygon 653 (hole)         4 -1.26313e-06     -1.89e-18\npolygon 654 (hole)         4 -1.90718e-03     -2.85e-15\npolygon 655 (hole)         4 -1.07233e-07     -1.60e-19\npolygon 656 (hole)         3 -7.26183e-03     -1.08e-14\npolygon 657 (hole)         3 -2.76213e-10     -4.12e-22\npolygon 658 (hole)         3 -2.80771e-02     -4.19e-14\npolygon 659 (hole)         7 -5.31797e-03     -7.94e-15\npolygon 660 (hole)         5 -4.51363e-09     -6.74e-21\npolygon 661 (hole)         4 -3.64153e-07     -5.44e-19\npolygon 662 (hole)         4 -1.88745e-02     -2.82e-14\npolygon 663 (hole)         4 -1.01723e-07     -1.52e-19\npolygon 664 (hole)         3 -1.45605e-02     -2.17e-14\npolygon 665 (hole)         6 -2.86011e-06     -4.27e-18\npolygon 666 (hole)         3 -2.28810e-02     -3.42e-14\npolygon 667 (hole)         4 -9.08794e-08     -1.36e-19\npolygon 668 (hole)         5 -1.72617e-02     -2.58e-14\npolygon 669 (hole)         3 -4.96859e-03     -7.42e-15\npolygon 670 (hole)         4 -1.85807e-02     -2.77e-14\npolygon 671 (hole)         4 -8.61249e-03     -1.29e-14\npolygon 672 (hole)         3 -1.66645e-03     -2.49e-15\npolygon 673 (hole)         7 -1.66808e-02     -2.49e-14\npolygon 674 (hole)         4 -1.73584e-06     -2.59e-18\npolygon 675 (hole)         3 -8.26479e-08     -1.23e-19\npolygon 676 (hole)         6 -1.56749e-06     -2.34e-18\npolygon 677 (hole)         3 -2.86223e-09     -4.27e-21\npolygon 678 (hole)         8 -1.27636e-06     -1.91e-18\npolygon 679 (hole)        11 -3.66415e-06     -5.47e-18\npolygon 680 (hole)        10 -3.21224e-06     -4.80e-18\npolygon 681 (hole)        10 -2.58025e-06     -3.85e-18\npolygon 682 (hole)         3 -1.73697e-07     -2.59e-19\npolygon 683 (hole)         3 -1.38098e-08     -2.06e-20\npolygon 684 (hole)        14 -2.82179e-06     -4.21e-18\npolygon 685 (hole)         4 -2.41048e-07     -3.60e-19\npolygon 686 (hole)        19 -6.09380e-06     -9.10e-18\npolygon 687 (hole)         5 -5.81704e-07     -8.69e-19\npolygon 688 (hole)         8 -2.67945e-06     -4.00e-18\npolygon 689 (hole)        15 -6.54951e-06     -9.78e-18\npolygon 690 (hole)         3 -2.38016e-08     -3.55e-20\npolygon 691 (hole)         4 -1.05535e-06     -1.58e-18\npolygon 692 (hole)         8 -3.22016e-07     -4.81e-19\npolygon 693 (hole)         7 -1.49278e-06     -2.23e-18\npolygon 694 (hole)         8 -2.37875e-06     -3.55e-18\npolygon 695 (hole)         7 -6.28647e-07     -9.39e-19\npolygon 696 (hole)        16 -4.13786e-06     -6.18e-18\npolygon 697 (hole)        34 -1.71423e-05     -2.56e-17\npolygon 698 (hole)         4 -1.63033e-06     -2.43e-18\npolygon 699 (hole)         4 -2.10479e-07     -3.14e-19\npolygon 700 (hole)         8 -5.80075e-06     -8.66e-18\npolygon 701 (hole)         3 -6.63547e-08     -9.91e-20\npolygon 702 (hole)         8 -6.48529e-07     -9.68e-19\npolygon 703 (hole)         4 -1.22292e-06     -1.83e-18\npolygon 704 (hole)         3 -3.69723e-09     -5.52e-21\npolygon 705 (hole)         6 -1.48900e-06     -2.22e-18\npolygon 706 (hole)         8 -1.39392e-06     -2.08e-18\npolygon 707 (hole)        11 -5.05385e-06     -7.55e-18\npolygon 708 (hole)        15 -9.73640e-06     -1.45e-17\npolygon 709 (hole)         6 -9.42407e-07     -1.41e-18\npolygon 710 (hole)         4 -4.51758e-07     -6.75e-19\npolygon 711 (hole)         3 -1.40094e-08     -2.09e-20\npolygon 712 (hole)         4 -5.59670e-07     -8.36e-19\npolygon 713 (hole)         8 -5.07976e-07     -7.58e-19\npolygon 714 (hole)         9 -2.30103e-06     -3.44e-18\npolygon 715 (hole)        11 -1.85244e-06     -2.77e-18\npolygon 716 (hole)         4 -4.41141e-07     -6.59e-19\npolygon 717 (hole)         3 -5.14970e-09     -7.69e-21\npolygon 718 (hole)         3 -1.23756e-07     -1.85e-19\npolygon 719 (hole)        10 -5.08583e-06     -7.59e-18\npolygon 720 (hole)         3 -3.50795e-09     -5.24e-21\npolygon 721 (hole)         3 -2.55812e-08     -3.82e-20\npolygon 722 (hole)        10 -2.30769e-06     -3.45e-18\npolygon 723 (hole)         4 -2.79503e-07     -4.17e-19\npolygon 724 (hole)         5 -4.95816e-07     -7.40e-19\npolygon 725 (hole)        50 -2.64857e-05     -3.95e-17\npolygon 726 (hole)         4 -8.77056e-07     -1.31e-18\npolygon 727 (hole)         6 -2.22331e-06     -3.32e-18\npolygon 728 (hole)         4 -2.50835e-06     -3.75e-18\npolygon 729 (hole)         4 -1.17536e-07     -1.76e-19\npolygon 730 (hole)         5 -1.71933e-06     -2.57e-18\npolygon 731 (hole)         4 -2.01837e-06     -3.01e-18\npolygon 732 (hole)        10 -3.98806e-06     -5.95e-18\npolygon 733 (hole)         6 -2.21318e-06     -3.30e-18\npolygon 734 (hole)         6 -8.93389e-07     -1.33e-18\npolygon 735 (hole)         6 -2.07502e-06     -3.10e-18\npolygon 736 (hole)        25 -1.89169e-05     -2.82e-17\npolygon 737 (hole)         4 -7.39039e-08     -1.10e-19\npolygon 738 (hole)         4 -1.38246e-08     -2.06e-20\npolygon 739 (hole)         4 -3.40264e-07     -5.08e-19\npolygon 740 (hole)         3 -1.77119e-07     -2.64e-19\npolygon 741 (hole)        14 -6.84286e-06     -1.02e-17\npolygon 742 (hole)        12 -4.68955e-06     -7.00e-18\npolygon 743 (hole)         5 -5.12786e-07     -7.66e-19\npolygon 744 (hole)         7 -6.35489e-07     -9.49e-19\npolygon 745 (hole)         5 -4.23206e-07     -6.32e-19\npolygon 746 (hole)        14 -5.39036e-06     -8.05e-18\npolygon 747               19  2.15295e+05      3.21e-07\npolygon 748               16  3.50061e+05      5.23e-07\npolygon 749 (hole)         3 -1.78834e+02     -2.67e-10\npolygon 750               14  2.11571e+05      3.16e-07\npolygon 751               11  1.59536e+05      2.38e-07\npolygon 752              111  7.35028e+07      1.10e-04\npolygon 753               54  9.35305e+06      1.40e-05\npolygon 754               19  6.34649e+05      9.48e-07\npolygon 755               10  3.74827e+04      5.60e-08\npolygon 756               13  1.37100e+05      2.05e-07\npolygon 757               31  4.47193e+06      6.68e-06\npolygon 758               19  1.23742e+06      1.85e-06\npolygon 759               20  1.79201e+06      2.68e-06\npolygon 760               16  2.19464e+05      3.28e-07\npolygon 761               11  7.94092e+04      1.19e-07\npolygon 762               14  1.45779e+05      2.18e-07\npolygon 763               31  6.24672e+05      9.33e-07\npolygon 764               11  2.29288e+04      3.42e-08\npolygon 765               18  2.10998e+05      3.15e-07\npolygon 766               26  2.52571e+06      3.77e-06\npolygon 767               16  5.77783e+05      8.63e-07\npolygon 768               26  8.87985e+05      1.33e-06\npolygon 769               13  1.10557e+05      1.65e-07\npolygon 770               21  9.55338e+05      1.43e-06\npolygon 771               32  2.18189e+06      3.26e-06\npolygon 772               18  7.64830e+05      1.14e-06\npolygon 773               34  1.71336e+06      2.56e-06\npolygon 774              115  9.29594e+05      1.39e-06\npolygon 775               68  2.06761e+05      3.09e-07\npolygon 776               40  4.87851e+06      7.28e-06\npolygon 777               10  7.43137e+04      1.11e-07\npolygon 778               17  5.95020e+05      8.88e-07\npolygon 779               21  4.02132e+05      6.00e-07\npolygon 780               21  1.09635e+06      1.64e-06\npolygon 781               14  1.15356e+05      1.72e-07\npolygon 782               20  3.13610e+05      4.68e-07\npolygon 783              275  3.92648e+08      5.86e-04\npolygon 784               16  2.19612e+05      3.28e-07\npolygon 785               13  2.64858e+05      3.95e-07\npolygon 786               23  1.25549e+06      1.87e-06\npolygon 787                9  1.79312e+05      2.68e-07\npolygon 788               15  2.93132e+05      4.38e-07\npolygon 789               15  5.29892e+05      7.91e-07\npolygon 790               23  4.95351e+05      7.40e-07\npolygon 791               14  4.41976e+05      6.60e-07\npolygon 792               19  3.32318e+05      4.96e-07\npolygon 793               16  4.15914e+05      6.21e-07\npolygon 794               22  5.10526e+05      7.62e-07\npolygon 795               48  1.87148e+07      2.79e-05\npolygon 796               18  1.62882e+06      2.43e-06\npolygon 797               71  2.43615e+07      3.64e-05\npolygon 798              116  5.16444e+07      7.71e-05\npolygon 799               19  1.54144e+06      2.30e-06\npolygon 800               11  2.01013e+05      3.00e-07\npolygon 801               20  2.31201e+06      3.45e-06\npolygon 802               15  5.94674e+05      8.88e-07\npolygon 803              218  1.56252e+08      2.33e-04\npolygon 804              162  8.80247e+07      1.31e-04\npolygon 805               16  3.69968e+05      5.52e-07\npolygon 806               14  1.61451e+05      2.41e-07\npolygon 807               18  5.54566e+05      8.28e-07\npolygon 808               19  5.07078e+05      7.57e-07\npolygon 809               57  6.86475e+06      1.03e-05\npolygon 810               15  6.56018e+05      9.80e-07\npolygon 811               21  6.65092e+05      9.93e-07\npolygon 812               15  5.97784e+05      8.93e-07\npolygon 813               37  2.56010e+06      3.82e-06\npolygon 814               13  1.66996e+05      2.49e-07\npolygon 815               20  8.18381e+05      1.22e-06\npolygon 816               21  2.89704e+06      4.33e-06\npolygon 817               15  4.08213e+05      6.10e-07\npolygon 818              104  4.71547e+07      7.04e-05\npolygon 819               28  3.80443e+06      5.68e-06\npolygon 820               67  3.17343e+07      4.74e-05\npolygon 821              730  9.20735e+08      1.37e-03\npolygon 822               16  2.01576e+05      3.01e-07\npolygon 823               12  1.41506e+05      2.11e-07\npolygon 824               15  4.92125e+05      7.35e-07\npolygon 825               18  1.58128e+06      2.36e-06\npolygon 826               25  1.94322e+06      2.90e-06\npolygon 827               12  2.51373e+05      3.75e-07\npolygon 828              412  4.47936e+08      6.69e-04\npolygon 829               22  7.57105e+05      1.13e-06\npolygon 830               16  6.97434e+05      1.04e-06\npolygon 831               39  4.45130e+06      6.65e-06\npolygon 832               13  8.83786e+05      1.32e-06\npolygon 833               10  2.06200e+05      3.08e-07\npolygon 834               76  3.60497e+07      5.38e-05\npolygon 835               13  4.56433e+05      6.82e-07\npolygon 836               28  2.30613e+06      3.44e-06\npolygon 837               27  2.50338e+06      3.74e-06\npolygon 838               14  4.69238e+05      7.01e-07\npolygon 839               10  1.69886e+05      2.54e-07\npolygon 840               16  5.42822e+05      8.11e-07\npolygon 841               10  1.17633e+05      1.76e-07\npolygon 842                8  7.08579e+04      1.06e-07\npolygon 843              144  7.85300e+07      1.17e-04\npolygon 844               37  1.93477e+06      2.89e-06\npolygon 845               25  5.59996e+05      8.36e-07\npolygon 846               44  2.86031e+06      4.27e-06\npolygon 847               26  1.26276e+06      1.89e-06\npolygon 848              149  1.37840e+08      2.06e-04\npolygon 849               18  4.84958e+05      7.24e-07\npolygon 850               73  2.93195e+07      4.38e-05\npolygon 851               45  6.87481e+06      1.03e-05\npolygon 852               64  1.80880e+07      2.70e-05\npolygon 853               12  8.76879e+05      1.31e-06\npolygon 854               26  2.78381e+06      4.16e-06\npolygon 855               35  8.72326e+06      1.30e-05\npolygon 856               53  1.06237e+07      1.59e-05\npolygon 857               26  5.40467e+06      8.07e-06\npolygon 858              148  1.05037e+08      1.57e-04\npolygon 859               21  8.32798e+05      1.24e-06\npolygon 860               21  2.23023e+06      3.33e-06\npolygon 861                8  6.30805e+05      9.42e-07\npolygon 862               78  3.67603e+07      5.49e-05\npolygon 863               18  1.64745e+06      2.46e-06\npolygon 864               58  1.31747e+07      1.97e-05\npolygon 865               94  1.16837e+07      1.74e-05\npolygon 866               53  3.17801e+06      4.75e-06\npolygon 867              137  8.46454e+06      1.26e-05\npolygon 868               23  4.36507e+05      6.52e-07\npolygon 869               27  9.72136e+05      1.45e-06\npolygon 870 (hole)         5 -6.97021e-07     -1.04e-18\npolygon 871 (hole)         8 -3.52861e-06     -5.27e-18\npolygon 872               55  1.98854e+06      2.97e-06\npolygon 873 (hole)         3 -2.04762e-08     -3.06e-20\npolygon 874 (hole)         4 -6.22375e-07     -9.29e-19\npolygon 875 (hole)         4 -2.36873e-07     -3.54e-19\npolygon 876 (hole)        10 -2.81071e-06     -4.20e-18\npolygon 877 (hole)         3 -7.27160e-09     -1.09e-20\npolygon 878 (hole)         4 -1.10286e-06     -1.65e-18\npolygon 879 (hole)         6 -1.93232e-06     -2.89e-18\npolygon 880 (hole)         4 -1.51309e-07     -2.26e-19\npolygon 881 (hole)        10 -7.07665e-06     -1.06e-17\npolygon 882 (hole)         6 -2.19324e-07     -3.27e-19\npolygon 883 (hole)         4 -2.88552e-07     -4.31e-19\npolygon 884 (hole)         4 -1.75262e-07     -2.62e-19\npolygon 885 (hole)         6 -7.12345e-07     -1.06e-18\npolygon 886 (hole)         4 -1.22366e-06     -1.83e-18\npolygon 887 (hole)         3 -2.13831e-08     -3.19e-20\npolygon 888 (hole)         4 -9.22699e-07     -1.38e-18\npolygon 889 (hole)         7 -1.61583e-06     -2.41e-18\npolygon 890 (hole)         4 -3.05722e-07     -4.56e-19\npolygon 891 (hole)         4 -2.78836e-07     -4.16e-19\npolygon 892 (hole)        10 -4.43177e-06     -6.62e-18\npolygon 893 (hole)         4 -1.73147e-06     -2.59e-18\npolygon 894 (hole)         5 -1.27245e-06     -1.90e-18\npolygon 895 (hole)         6 -1.04516e-06     -1.56e-18\npolygon 896 (hole)        10 -1.02181e-06     -1.53e-18\npolygon 897 (hole)        10 -4.76338e-06     -7.11e-18\npolygon 898 (hole)         3 -5.17982e-08     -7.73e-20\npolygon 899 (hole)         4 -4.56779e-07     -6.82e-19\npolygon 900 (hole)        14 -6.60975e-06     -9.87e-18\npolygon 901 (hole)         4 -1.89112e-07     -2.82e-19\npolygon 902 (hole)         3 -2.16955e-08     -3.24e-20\npolygon 903 (hole)         5 -7.94332e-07     -1.19e-18\npolygon 904 (hole)         4 -9.89198e-08     -1.48e-19\npolygon 905 (hole)         3 -1.77373e-08     -2.65e-20\npolygon 906 (hole)         4 -3.64370e-07     -5.44e-19\npolygon 907 (hole)         4 -2.24606e-07     -3.35e-19\npolygon 908 (hole)         8 -2.36780e-06     -3.54e-18\npolygon 909 (hole)         4 -7.04234e-08     -1.05e-19\npolygon 910 (hole)         5 -5.34330e-07     -7.98e-19\npolygon 911 (hole)         3 -7.79609e-08     -1.16e-19\npolygon 912 (hole)         4 -1.25316e-07     -1.87e-19\npolygon 913 (hole)         7 -1.04799e-06     -1.56e-18\npolygon 914 (hole)        10 -2.48459e-06     -3.71e-18\npolygon 915 (hole)         7 -7.38000e-07     -1.10e-18\npolygon 916 (hole)         7 -3.13894e-07     -4.69e-19\npolygon 917 (hole)        12 -7.14816e-06     -1.07e-17\npolygon 918 (hole)         6 -5.26802e-07     -7.87e-19\npolygon 919 (hole)        12 -4.31344e-06     -6.44e-18\npolygon 920 (hole)         5 -5.57508e-07     -8.32e-19\npolygon 921 (hole)         4 -2.54699e-07     -3.80e-19\npolygon 922 (hole)         4 -1.30150e-07     -1.94e-19\npolygon 923 (hole)         7 -6.13772e-07     -9.16e-19\npolygon 924 (hole)         7 -6.14897e-06     -9.18e-18\npolygon 925 (hole)         3 -2.18561e-08     -3.26e-20\npolygon 926 (hole)         3 -6.63760e-09     -9.91e-21\npolygon 927 (hole)         4 -2.83899e-07     -4.24e-19\npolygon 928 (hole)         8 -3.03154e-06     -4.53e-18\npolygon 929 (hole)         4 -1.34999e-07     -2.02e-19\npolygon 930 (hole)         4 -9.24206e-09     -1.38e-20\npolygon 931 (hole)         4 -3.37664e-07     -5.04e-19\npolygon 932 (hole)         4 -6.24926e-07     -9.33e-19\npolygon 933 (hole)         4 -1.86883e-07     -2.79e-19\npolygon 934 (hole)         5 -3.87980e-07     -5.79e-19\npolygon 935 (hole)         3 -1.19726e-07     -1.79e-19\npolygon 936 (hole)         3 -3.16269e-08     -4.72e-20\npolygon 937 (hole)        14 -1.35927e-05     -2.03e-17\npolygon 938 (hole)         4 -2.44946e-07     -3.66e-19\npolygon 939 (hole)         5 -7.43645e-08     -1.11e-19\npolygon 940 (hole)         3 -2.82993e-08     -4.23e-20\npolygon 941 (hole)         6 -3.50049e-06     -5.23e-18\npolygon 942 (hole)         3 -3.12799e-09     -4.67e-21\npolygon 943 (hole)         8 -1.63751e-06     -2.45e-18\npolygon 944 (hole)         3 -3.41559e-08     -5.10e-20\npolygon 945 (hole)         4 -1.35920e-07     -2.03e-19\npolygon 946 (hole)         6 -1.48117e-06     -2.21e-18\npolygon 947 (hole)         4 -1.87856e-06     -2.81e-18\npolygon 948 (hole)         5 -7.00330e-07     -1.05e-18\npolygon 949 (hole)         6 -9.15044e-07     -1.37e-18\npolygon 950 (hole)         4 -7.13686e-07     -1.07e-18\npolygon 951 (hole)         6 -1.69196e-06     -2.53e-18\npolygon 952               48  1.02651e+07      1.53e-05\npolygon 953 (hole)        12 -5.63666e-06     -8.42e-18\npolygon 954 (hole)         3 -6.62619e-07     -9.89e-19\npolygon 955 (hole)         4 -7.51731e-07     -1.12e-18\npolygon 956 (hole)         3 -4.76591e-07     -7.12e-19\npolygon 957 (hole)         4 -1.39374e-06     -2.08e-18\npolygon 958 (hole)         4 -3.54028e-06     -5.29e-18\npolygon 959 (hole)         3 -2.20492e-09     -3.29e-21\npolygon 960 (hole)        20 -1.44592e-05     -2.16e-17\npolygon 961 (hole)         5 -4.19637e-07     -6.27e-19\npolygon 962 (hole)        39 -1.89868e-05     -2.84e-17\npolygon 963 (hole)         6 -7.08690e-07     -1.06e-18\npolygon 964 (hole)         3 -5.33030e-08     -7.96e-20\npolygon 965 (hole)         3 -4.18672e-08     -6.25e-20\npolygon 966 (hole)         6 -1.19843e-06     -1.79e-18\npolygon 967 (hole)         5 -1.19407e-07     -1.78e-19\npolygon 968 (hole)         4 -7.75621e-08     -1.16e-19\npolygon 969 (hole)         8 -1.14379e-06     -1.71e-18\npolygon 970 (hole)         3 -2.13254e-08     -3.18e-20\npolygon 971 (hole)         7 -1.65696e-07     -2.47e-19\npolygon 972 (hole)         3 -1.12670e-09     -1.68e-21\npolygon 973 (hole)         3 -6.74502e-09     -1.01e-20\npolygon 974 (hole)         3 -8.15548e-08     -1.22e-19\npolygon 975 (hole)         3 -3.27681e-09     -4.89e-21\npolygon 976 (hole)         3 -1.22342e-08     -1.83e-20\npolygon 977 (hole)         3 -5.54257e-11     -8.28e-23\npolygon 978 (hole)         3 -3.48620e-09     -5.21e-21\npolygon 979 (hole)         4 -5.48096e-07     -8.18e-19\npolygon 980 (hole)         4 -6.02066e-08     -8.99e-20\npolygon 981 (hole)         3 -1.26456e-08     -1.89e-20\npolygon 982 (hole)         4 -6.89152e-08     -1.03e-19\npolygon 983 (hole)         4 -4.57305e-07     -6.83e-19\npolygon 984 (hole)         4 -7.91420e-07     -1.18e-18\npolygon 985 (hole)         4 -1.33472e-06     -1.99e-18\npolygon 986               15  3.16153e+05      4.72e-07\npolygon 987               22  8.93201e+05      1.33e-06\npolygon 988               18  2.91538e+05      4.35e-07\npolygon 989               59  3.70736e+06      5.54e-06\npolygon 990               11  1.55205e+05      2.32e-07\npolygon 991               14  1.87401e+05      2.80e-07\npolygon 992               11  6.54128e+04      9.77e-08\npolygon 993               11  8.64659e+04      1.29e-07\npolygon 994               12  2.25129e+05      3.36e-07\npolygon 995               30  2.72178e+06      4.06e-06\npolygon 996 (hole)         3 -2.26252e+00     -3.38e-12\npolygon 997              180  1.80314e+07      2.69e-05\npolygon 998               14  4.01942e+05      6.00e-07\npolygon 999              103  1.33467e+07      1.99e-05\npolygon 1000              14  2.07708e+05      3.10e-07\npolygon 1001              55  4.38623e+06      6.55e-06\npolygon 1002              41  4.69733e+06      7.01e-06\npolygon 1003              74  3.92633e+06      5.86e-06\npolygon 1004              31  2.79477e+06      4.17e-06\npolygon 1005              17  8.74607e+05      1.31e-06\npolygon 1006              26  4.50962e+05      6.73e-07\npolygon 1007              18  1.15065e+06      1.72e-06\npolygon 1008             164  1.48037e+07      2.21e-05\npolygon 1009              12  3.17290e+05      4.74e-07\npolygon 1010              69  2.59551e+07      3.88e-05\npolygon 1011              37  7.85963e+05      1.17e-06\npolygon 1012              14  3.37873e+05      5.05e-07\npolygon 1013              12  1.77980e+05      2.66e-07\npolygon 1014              21  6.46195e+05      9.65e-07\npolygon 1015              24  2.69998e+06      4.03e-06\npolygon 1016              30  1.00675e+06      1.50e-06\npolygon 1017              57  4.22747e+06      6.31e-06\npolygon 1018              23  8.63543e+05      1.29e-06\npolygon 1019              11  2.01925e+05      3.02e-07\npolygon 1020              95  2.88232e+07      4.30e-05\npolygon 1021             452  9.64208e+07      1.44e-04\npolygon 1022              77  1.72297e+07      2.57e-05\npolygon 1023              16  3.33522e+05      4.98e-07\npolygon 1024              19  6.82895e+05      1.02e-06\npolygon 1025              43  3.95062e+06      5.90e-06\npolygon 1026              29  1.00709e+06      1.50e-06\npolygon 1027              21  8.90014e+05      1.33e-06\npolygon 1028              22  7.93453e+05      1.18e-06\npolygon 1029              13  4.52813e+05      6.76e-07\npolygon 1030              30  1.49817e+06      2.24e-06\npolygon 1031              48  4.23996e+06      6.33e-06\npolygon 1032              37  1.20290e+06      1.80e-06\npolygon 1033              19  4.85805e+05      7.25e-07\npolygon 1034              46  2.18001e+06      3.26e-06\npolygon 1035               7  1.33723e+05      2.00e-07\npolygon 1036              54  1.82059e+07      2.72e-05\npolygon 1037              10  8.57866e+05      1.28e-06\npolygon 1038              14  1.98445e+05      2.96e-07\npolygon 1039              19  4.68357e+05      6.99e-07\npolygon 1040              52  8.57765e+06      1.28e-05\npolygon 1041              73  7.91998e+06      1.18e-05\npolygon 1042              23  8.19561e+06      1.22e-05\npolygon 1043              10  1.06594e+05      1.59e-07\npolygon 1044             169  1.39462e+07      2.08e-05\npolygon 1045              17  2.55915e+05      3.82e-07\npolygon 1046              12  1.81516e+05      2.71e-07\npolygon 1047              16  3.68509e+05      5.50e-07\npolygon 1048              12  1.24954e+05      1.87e-07\npolygon 1049            1012  4.61886e+08      6.90e-04\npolygon 1050              15  5.42647e+05      8.10e-07\npolygon 1051              12  5.53088e+05      8.26e-07\npolygon 1052              24  1.06455e+06      1.59e-06\npolygon 1053              14  3.17038e+05      4.73e-07\npolygon 1054              17  1.25559e+06      1.87e-06\npolygon 1055              16  1.92407e+06      2.87e-06\npolygon 1056              80  1.86306e+07      2.78e-05\npolygon 1057              11  6.83880e+04      1.02e-07\npolygon 1058             166  4.21470e+07      6.29e-05\npolygon 1059              22  1.36174e+06      2.03e-06\npolygon 1060              31  6.07363e+05      9.07e-07\npolygon 1061              10  1.27067e+05      1.90e-07\npolygon 1062             164  5.02951e+07      7.51e-05\npolygon 1063              17  1.20798e+06      1.80e-06\npolygon 1064              59  2.41720e+06      3.61e-06\npolygon 1065              12  2.52952e+05      3.78e-07\npolygon 1066              14  2.44407e+05      3.65e-07\npolygon 1067              43  4.89177e+06      7.30e-06\npolygon 1068              40  3.86642e+06      5.77e-06\npolygon 1069              23  4.59203e+05      6.86e-07\npolygon 1070              14  1.79442e+05      2.68e-07\npolygon 1071              13  1.61191e+05      2.41e-07\npolygon 1072              43  1.33365e+06      1.99e-06\npolygon 1073              75  1.20247e+07      1.80e-05\npolygon 1074              17  9.96466e+04      1.49e-07\npolygon 1075              22  1.60660e+06      2.40e-06\npolygon 1076             730  1.16983e+08      1.75e-04\npolygon 1077             129  7.87539e+06      1.18e-05\npolygon 1078              22  4.66256e+05      6.96e-07\npolygon 1079              19  5.44519e+05      8.13e-07\npolygon 1080              16  3.73911e+05      5.58e-07\npolygon 1081              88  3.47678e+07      5.19e-05\npolygon 1082              46  3.23711e+06      4.83e-06\npolygon 1083              47  9.17482e+05      1.37e-06\npolygon 1084              14  4.44869e+05      6.64e-07\npolygon 1085              43  1.29527e+06      1.93e-06\npolygon 1086              65  3.20974e+06      4.79e-06\npolygon 1087             306  1.83695e+07      2.74e-05\npolygon 1088              17  4.25486e+05      6.35e-07\npolygon 1089              29  1.08467e+06      1.62e-06\npolygon 1090              26  1.16602e+06      1.74e-06\npolygon 1091             135  4.90655e+06      7.33e-06\npolygon 1092              23  1.87723e+06      2.80e-06\npolygon 1093              21  7.02338e+05      1.05e-06\npolygon 1094              30  4.99970e+06      7.47e-06\npolygon 1095              21  7.71571e+05      1.15e-06\npolygon 1096              13  1.47832e+05      2.21e-07\npolygon 1097              26  3.17307e+06      4.74e-06\npolygon 1098              17  1.03642e+06      1.55e-06\npolygon 1099             100  8.74537e+06      1.31e-05\npolygon 1100              11  1.13950e+05      1.70e-07\npolygon 1101              26  8.27840e+05      1.24e-06\npolygon 1102              17  4.10882e+05      6.14e-07\npolygon 1103              13  1.49250e+05      2.23e-07\npolygon 1104              35  1.76408e+06      2.63e-06\npolygon 1105              15  2.03390e+05      3.04e-07\npolygon 1106              18  1.70982e+05      2.55e-07\npolygon 1107              32  7.98599e+06      1.19e-05\npolygon 1108              27  3.20839e+05      4.79e-07\npolygon 1109             539  1.17139e+08      1.75e-04\npolygon 1110              51  1.57614e+06      2.35e-06\npolygon 1111              19  3.60772e+05      5.39e-07\npolygon 1112              58  2.10060e+06      3.14e-06\npolygon 1113              13  1.70224e+05      2.54e-07\npolygon 1114              11  6.11736e+05      9.13e-07\npolygon 1115              35  5.26152e+06      7.86e-06\npolygon 1116              16  1.99371e+05      2.98e-07\npolygon 1117              14  4.48979e+05      6.70e-07\npolygon 1118              25  1.92913e+06      2.88e-06\npolygon 1119              16  4.26157e+05      6.36e-07\npolygon 1120              46  1.88229e+06      2.81e-06\npolygon 1121              17  2.29456e+05      3.43e-07\npolygon 1122              36  4.01418e+06      5.99e-06\npolygon 1123              57  1.77153e+07      2.65e-05\npolygon 1124              20  5.72298e+05      8.55e-07\npolygon 1125              14  2.46782e+05      3.68e-07\npolygon 1126              29  1.01300e+06      1.51e-06\npolygon 1127              90  8.54955e+06      1.28e-05\npolygon 1128              21  3.99098e+05      5.96e-07\npolygon 1129              12  2.81650e+05      4.21e-07\npolygon 1130              52  3.19337e+06      4.77e-06\npolygon 1131              13  3.40300e+05      5.08e-07\npolygon 1132              29  9.08533e+05      1.36e-06\npolygon 1133              20  3.07393e+05      4.59e-07\npolygon 1134              19  1.15906e+06      1.73e-06\npolygon 1135              17  1.16182e+06      1.73e-06\npolygon 1136              21  2.60877e+06      3.90e-06\npolygon 1137              15  1.09001e+05      1.63e-07\npolygon 1138              37  1.31921e+06      1.97e-06\npolygon 1139              53  1.46854e+06      2.19e-06\npolygon 1140              59  8.92822e+06      1.33e-05\npolygon 1141               9  7.44981e+04      1.11e-07\npolygon 1142              14  2.41462e+05      3.61e-07\npolygon 1143              96  7.25940e+06      1.08e-05\npolygon 1144              11  1.06055e+05      1.58e-07\npolygon 1145              49  1.87834e+06      2.80e-06\npolygon 1146              23  6.08310e+05      9.08e-07\npolygon 1147              50  6.76488e+05      1.01e-06\npolygon 1148              22  4.83089e+05      7.21e-07\npolygon 1149              17  1.17278e+05      1.75e-07\npolygon 1150              13  8.98786e+05      1.34e-06\npolygon 1151              43  1.01757e+06      1.52e-06\npolygon 1152              52  1.68377e+06      2.51e-06\npolygon 1153             348  2.50314e+08      3.74e-04\npolygon 1154              43  1.29120e+06      1.93e-06\npolygon 1155              71  2.02836e+06      3.03e-06\npolygon 1156 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 1157             141  4.53240e+06      6.77e-06\npolygon 1158              52  3.62008e+06      5.41e-06\npolygon 1159              20  7.69539e+05      1.15e-06\npolygon 1160              88  8.88904e+06      1.33e-05\npolygon 1161              12  1.44668e+05      2.16e-07\npolygon 1162              46  2.28026e+06      3.40e-06\npolygon 1163              39  4.79165e+06      7.15e-06\npolygon 1164              53  2.86736e+06      4.28e-06\npolygon 1165              38  3.22508e+06      4.82e-06\npolygon 1166              18  4.44863e+05      6.64e-07\npolygon 1167              45  1.45134e+06      2.17e-06\npolygon 1168              86  2.56400e+07      3.83e-05\npolygon 1169             158  1.74510e+07      2.61e-05\npolygon 1170              14  2.50383e+05      3.74e-07\npolygon 1171             120  7.17019e+06      1.07e-05\npolygon 1172             146  2.28448e+07      3.41e-05\npolygon 1173             143  2.34472e+07      3.50e-05\npolygon 1174              20  3.47415e+05      5.19e-07\npolygon 1175              84  3.86387e+06      5.77e-06\npolygon 1176              68  1.10850e+07      1.66e-05\npolygon 1177             863  7.47702e+07      1.12e-04\npolygon 1178              53  7.54742e+06      1.13e-05\npolygon 1179              64  2.11016e+06      3.15e-06\npolygon 1180             103  1.47525e+07      2.20e-05\npolygon 1181              26  3.40345e+06      5.08e-06\npolygon 1182             103  8.40445e+06      1.25e-05\npolygon 1183              23  4.92041e+05      7.35e-07\npolygon 1184              27  5.53625e+05      8.27e-07\npolygon 1185              60  3.56102e+06      5.32e-06\npolygon 1186             151  1.51314e+07      2.26e-05\npolygon 1187             708  4.18129e+08      6.24e-04\npolygon 1188             120  1.32857e+07      1.98e-05\npolygon 1189             856  2.53898e+08      3.79e-04\npolygon 1190              13  2.47298e+05      3.69e-07\npolygon 1191              16  7.35754e+05      1.10e-06\npolygon 1192              21  5.31633e+05      7.94e-07\npolygon 1193              72  1.03185e+07      1.54e-05\npolygon 1194              38  1.34734e+06      2.01e-06\npolygon 1195               8  4.09489e+05      6.11e-07\npolygon 1196              17  2.46995e+05      3.69e-07\npolygon 1197              14  1.42285e+05      2.12e-07\npolygon 1198               9  1.56346e+05      2.33e-07\npolygon 1199              42  5.49581e+05      8.21e-07\npolygon 1200              59  1.15813e+06      1.73e-06\npolygon 1201              12  1.16845e+05      1.74e-07\npolygon 1202              11  6.00122e+04      8.96e-08\npolygon 1203              14  1.63465e+05      2.44e-07\npolygon 1204               8  4.73674e+04      7.07e-08\npolygon 1205              23  6.69330e+05      9.99e-07\npolygon 1206             144  6.48346e+06      9.68e-06\npolygon 1207              74  4.79923e+06      7.17e-06\npolygon 1208             116  1.02706e+07      1.53e-05\npolygon 1209              16  2.74005e+05      4.09e-07\npolygon 1210              97  4.72599e+06      7.06e-06\npolygon 1211              18  6.15583e+05      9.19e-07\npolygon 1212             146  1.38979e+07      2.08e-05\npolygon 1213              32  1.94516e+06      2.90e-06\npolygon 1214              26  9.81356e+05      1.47e-06\npolygon 1215              82  4.39797e+06      6.57e-06\npolygon 1216              33  9.36113e+05      1.40e-06\npolygon 1217              47  1.51844e+06      2.27e-06\npolygon 1218             196  2.32689e+07      3.47e-05\npolygon 1219              53  1.30069e+06      1.94e-06\npolygon 1220              70  1.00802e+07      1.51e-05\npolygon 1221              10  5.33870e+05      7.97e-07\npolygon 1222             211  2.73026e+07      4.08e-05\npolygon 1223              41  1.44141e+06      2.15e-06\npolygon 1224               9  5.20220e+05      7.77e-07\npolygon 1225             316  6.66808e+07      9.96e-05\npolygon 1226              17  7.48505e+05      1.12e-06\npolygon 1227              15  1.49799e+05      2.24e-07\npolygon 1228              24  4.99500e+05      7.46e-07\npolygon 1229              12  2.24463e+05      3.35e-07\npolygon 1230             100  1.06028e+07      1.58e-05\npolygon 1231              11  1.24267e+05      1.86e-07\npolygon 1232             143  1.89581e+07      2.83e-05\npolygon 1233              60  7.07802e+06      1.06e-05\npolygon 1234             124  1.23476e+07      1.84e-05\npolygon 1235              34  5.67625e+06      8.48e-06\npolygon 1236             797  1.86955e+08      2.79e-04\npolygon 1237              15  7.15891e+05      1.07e-06\npolygon 1238              20  1.61624e+06      2.41e-06\npolygon 1239              13  1.73955e+05      2.60e-07\npolygon 1240              60  2.42590e+06      3.62e-06\npolygon 1241              20  3.86365e+05      5.77e-07\npolygon 1242             213  3.69421e+07      5.52e-05\npolygon 1243              15  4.55574e+05      6.80e-07\npolygon 1244              35  1.56058e+06      2.33e-06\npolygon 1245              32  1.42419e+06      2.13e-06\npolygon 1246              68  2.30711e+06      3.44e-06\npolygon 1247             240  5.93935e+07      8.87e-05\npolygon 1248             145  1.58875e+07      2.37e-05\npolygon 1249              39  3.67239e+06      5.48e-06\npolygon 1250              54  3.84847e+06      5.75e-06\npolygon 1251              32  1.14073e+06      1.70e-06\npolygon 1252              18  3.58549e+05      5.35e-07\npolygon 1253              25  8.06470e+05      1.20e-06\npolygon 1254              15  2.67818e+05      4.00e-07\npolygon 1255              26  1.43681e+06      2.15e-06\npolygon 1256              18  3.10061e+05      4.63e-07\npolygon 1257              18  4.71644e+05      7.04e-07\npolygon 1258              16  5.04146e+05      7.53e-07\npolygon 1259              72  7.33720e+06      1.10e-05\npolygon 1260              27  1.37772e+06      2.06e-06\npolygon 1261              15  3.17217e+05      4.74e-07\npolygon 1262              37  1.17498e+06      1.75e-06\npolygon 1263              21  7.05388e+05      1.05e-06\npolygon 1264             216  2.05399e+07      3.07e-05\npolygon 1265              16  2.40093e+05      3.59e-07\npolygon 1266              29  1.71282e+06      2.56e-06\npolygon 1267              30  1.28695e+06      1.92e-06\npolygon 1268              36  2.29670e+06      3.43e-06\npolygon 1269             129  1.97698e+07      2.95e-05\npolygon 1270              65  2.65969e+06      3.97e-06\npolygon 1271             283  3.30575e+07      4.94e-05\npolygon 1272              28  7.06271e+05      1.05e-06\npolygon 1273              28  5.50158e+05      8.21e-07\npolygon 1274              49  2.25015e+06      3.36e-06\npolygon 1275              26  1.24280e+06      1.86e-06\npolygon 1276              28  9.02794e+05      1.35e-06\npolygon 1277              18  4.84064e+05      7.23e-07\npolygon 1278              47  2.33442e+06      3.49e-06\npolygon 1279              17  2.23835e+05      3.34e-07\npolygon 1280              34  7.32504e+05      1.09e-06\npolygon 1281              41  7.15538e+05      1.07e-06\npolygon 1282              21  5.81687e+05      8.69e-07\npolygon 1283              63  3.83819e+06      5.73e-06\npolygon 1284              27  1.33192e+06      1.99e-06\npolygon 1285              46  2.95028e+06      4.41e-06\npolygon 1286              10  1.34210e+05      2.00e-07\npolygon 1287              16  2.38274e+05      3.56e-07\npolygon 1288              18  4.18536e+05      6.25e-07\npolygon 1289              46  1.26584e+06      1.89e-06\npolygon 1290              14  2.14679e+05      3.21e-07\npolygon 1291              76  3.63371e+06      5.43e-06\npolygon 1292             339  4.44685e+07      6.64e-05\npolygon 1293             109  6.29786e+06      9.40e-06\npolygon 1294              14  2.89570e+05      4.32e-07\npolygon 1295              37  9.07704e+05      1.36e-06\npolygon 1296              68  3.86104e+06      5.77e-06\npolygon 1297             183  1.45458e+07      2.17e-05\npolygon 1298              44  1.64355e+06      2.45e-06\npolygon 1299              26  1.21667e+06      1.82e-06\npolygon 1300              13  1.95710e+05      2.92e-07\npolygon 1301              38  1.44402e+06      2.16e-06\npolygon 1302              14  3.29394e+05      4.92e-07\npolygon 1303              14  1.79828e+05      2.69e-07\npolygon 1304              44  2.11118e+06      3.15e-06\npolygon 1305             643  1.79215e+08      2.68e-04\npolygon 1306              24  1.10979e+06      1.66e-06\npolygon 1307              30  1.57106e+06      2.35e-06\npolygon 1308              46  3.61716e+06      5.40e-06\npolygon 1309              93  7.56340e+05      1.13e-06\npolygon 1310              57  3.07732e+06      4.59e-06\npolygon 1311              18  2.16224e+05      3.23e-07\npolygon 1312              17  5.12388e+05      7.65e-07\npolygon 1313               9  7.44780e+04      1.11e-07\npolygon 1314              57  8.09122e+06      1.21e-05\npolygon 1315              16  4.01323e+05      5.99e-07\npolygon 1316             118  2.90304e+07      4.33e-05\npolygon 1317              22  4.44693e+05      6.64e-07\npolygon 1318              43  2.28763e+06      3.42e-06\npolygon 1319              27  1.15444e+06      1.72e-06\npolygon 1320              25  1.21695e+06      1.82e-06\npolygon 1321              53  4.49228e+06      6.71e-06\npolygon 1322 (hole)        8 -1.14003e-01     -1.70e-13\npolygon 1323 (hole)        4 -5.05161e-02     -7.54e-14\npolygon 1324 (hole)        6 -3.83858e-06     -5.73e-18\npolygon 1325 (hole)        6 -6.42550e-02     -9.59e-14\npolygon 1326 (hole)        4 -1.10823e-02     -1.65e-14\npolygon 1327 (hole)        8 -1.54074e-01     -2.30e-13\npolygon 1328 (hole)        4 -5.15531e-03     -7.70e-15\npolygon 1329 (hole)        7 -4.08919e-02     -6.11e-14\npolygon 1330 (hole)        9 -6.45354e-02     -9.64e-14\npolygon 1331 (hole)       13 -6.64876e-02     -9.93e-14\npolygon 1332 (hole)        5 -5.31928e-02     -7.94e-14\npolygon 1333 (hole)        6 -4.67378e-02     -6.98e-14\npolygon 1334 (hole)        4 -2.58840e-02     -3.86e-14\npolygon 1335 (hole)       10 -9.35297e-02     -1.40e-13\npolygon 1336 (hole)        4 -1.76462e-02     -2.63e-14\npolygon 1337 (hole)        4 -5.14884e-02     -7.69e-14\npolygon 1338 (hole)        3 -1.43940e-03     -2.15e-15\npolygon 1339 (hole)        3 -2.72931e-02     -4.08e-14\npolygon 1340 (hole)        4 -9.91931e-02     -1.48e-13\npolygon 1341 (hole)       16 -1.55622e-05     -2.32e-17\npolygon 1342 (hole)        8 -2.24831e-06     -3.36e-18\npolygon 1343              79  1.47390e+07      2.20e-05\npolygon 1344           37614  6.60254e+11      9.86e-01\npolygon 1345 (hole)        8 -3.42277e-06     -5.11e-18\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\n\nplot(conflict_quarter_owin)\n\n\n\n\n\n\n\n\n\n\n6.1.3 Compute STKDE\n\nst_conflict &lt;- spattemp.density(conflict_quarter_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_conflict)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 45694.87 (spatial)\n  lambda = 0.007 (temporal)\n\nNo. of observations\n  30299 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [4.504043e-24, 1.041857e-10]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-the-spatio-temporal-kde-layers",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-the-spatio-temporal-kde-layers",
    "title": "Take Home Assignment 1",
    "section": "6.2 Plot the Spatio-temporal KDE layers",
    "text": "6.2 Plot the Spatio-temporal KDE layers\n\nquarter &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\nst_kde_plots &lt;- list()\n\npar(mfcol=c(1,4))\nfor(i in quarter){\n  plot(st_conflict, i, \n       override.par=FALSE,\n       fix.range=TRUE, \n       main=paste(\"KDE by quarter\", i))\n  st_kde_plots[[i]] &lt;- recordPlot()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the STKDE plots, I can observe that the conflicts are clustered within the regions that are central of Myanmar and that 2022 is the year with the highest conflicts compared to the other 3 years. In 2024 second quarter, conflicts have also started in the south of Myanmar where there are pink spots. These spots have not been observed previously in the other quarters."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "title": "Take Home Assignment 1",
    "section": "8.1 KDE Plots",
    "text": "8.1 KDE Plots\nSince previously I have saved the raster plot, I load them and put them into a list so that I can loop through the list and plot the quarterly KDE on the OpenStreetMap.\n\nkde_raster_1 &lt;- raster(\"data/raster/kde_myanmar_1.tif\")\nkde_raster_2 &lt;- raster(\"data/raster/kde_myanmar_2.tif\")\nkde_raster_3 &lt;- raster(\"data/raster/kde_myanmar_3.tif\")\nkde_raster_4 &lt;- raster(\"data/raster/kde_myanmar_4.tif\")\nkde_raster_5 &lt;- raster(\"data/raster/kde_myanmar_5.tif\")\nkde_raster_6 &lt;- raster(\"data/raster/kde_myanmar_6.tif\")\nkde_raster_7 &lt;- raster(\"data/raster/kde_myanmar_7.tif\")\nkde_raster_8 &lt;- raster(\"data/raster/kde_myanmar_8.tif\")\nkde_raster_9 &lt;- raster(\"data/raster/kde_myanmar_9.tif\")\nkde_raster_10 &lt;- raster(\"data/raster/kde_myanmar_10.tif\")\nkde_raster_11 &lt;- raster(\"data/raster/kde_myanmar_11.tif\")\nkde_raster_12 &lt;- raster(\"data/raster/kde_myanmar_12.tif\")\nkde_raster_13 &lt;- raster(\"data/raster/kde_myanmar_13.tif\")\nkde_raster_14 &lt;- raster(\"data/raster/kde_myanmar_14.tif\")\n\nkde_raster_list &lt;- list(kde_raster_1, kde_raster_2, kde_raster_3, kde_raster_4, kde_raster_5, kde_raster_6, kde_raster_7, kde_raster_8, kde_raster_9, kde_raster_10, kde_raster_11, kde_raster_12, kde_raster_13, kde_raster_14)\n\n\npar(mfrow=c(1,4))\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nfor (i in 1:length(kde_raster_list)){\n  map &lt;- tm_shape(kde_raster_list[[i]]) +\n    tm_raster(palette=\"viridis\",n=5, style=\"pretty\", alpha=0.6, title = paste(\"KDE at quarter\", i)) + \n    tm_layout(title = paste(\"KDE Quarterly\", i)) + \n    tm_basemap(\"OpenStreetMap\")+\n    tm_shape(boundary_data_sf) + tm_borders() +\n    tm_layout(legend.outside = TRUE)\n  print(map)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom all the plots above, I observed that most of the conflict are concentrated around the central region of Myanmar which was similar to what had been observed earlier. KDE Quarterly 9 to KDE Quarterly 11 plots have the highest concentrations of conflicts compared to the other plots as indicated by the yellow areas. KDE Quarterly 9 represents 2023 Q1, KDE Quarterly 10 represents 2023 Q2 and KDE Quarterly 11 represents 2023 Q3.\nMajority of the country shows lower concentrations of conflicts (coloured in dark purple) as seen from across all the plots."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatio-temporal-kde-plots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatio-temporal-kde-plots",
    "title": "Take Home Assignment 1",
    "section": "8.2 Spatio-temporal KDE Plots",
    "text": "8.2 Spatio-temporal KDE Plots\nFrom the STKDE plots, I retrieve the list of quarters which will be used to plot the STKDE plots.\n\nst_conflict_z &lt;- st_conflict$z\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nfor (time_point in names(st_conflict_z)){\n  density_conflict &lt;- st_conflict_z[[time_point]]\n  raster_conflict &lt;- raster(density_conflict)\n  raster_conflict &lt;- raster_conflict*1000\n  projection(raster_conflict) &lt;- CRS(\"+init=EPSG:32647\")\n  \n  st_map &lt;- tm_shape(raster_conflict) + \n    tm_raster(palette=\"viridis\", title=paste(\"Density at Quarter\", time_point)) + \n    tm_layout(title = paste(\"Spatiotemporal KDE Quarterly\", time_point)) +\n    tm_basemap(\"OpenStreetMap\") + \n    tm_shape(boundary_data_sf) + tm_borders() + \n    tm_layout(legend.outside = TRUE)\n  print(st_map)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the plots above, besides having high concentration of conflicts in the centralised area of Myanmar, there are also quite a few areas in the South with high concentration of conflicts that are coloured yellow. Some examples are Spatiotemporal KDE Quarterly 2 (2021 Q2), 3 (2021 Q3), 4 (2021 Q4) and 7 (2022 Q3).\nWhile comparing all the graphs, I realised that the conflict points in Spatiotemporal KDE Quarterly 3 (2021 Q3) are spread out that does not cover only the centralised region but also the southeast and northeast.\nKDE Quarterly 12 (2023 Q4) has high concentrations of conflicts not just in the centralised area of Myanmar but also near the northeast borders of Myanmar."
  }
]